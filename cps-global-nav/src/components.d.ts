/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LinkProps } from "./components/cps-global-nav/internal/LinkProps";
export { LinkProps } from "./components/cps-global-nav/internal/LinkProps";
export namespace Components {
    interface CpsGlobalNav {
        /**
          * The text to appear at the start of the second row
         */
        "name": string;
    }
    interface CpsGlobalNavExperimental {
        "forceEnvironment": string;
        /**
          * The text to appear at the start of the second row
         */
        "name": string;
    }
    interface DropDown {
        "label": string;
        "links": LinkProps[];
        "menuAlignment": "left" | "right";
    }
    interface NavLink {
        "disabled": boolean;
        "href": string;
        "label": string;
        "openInNewTab"?: boolean;
        "selected": boolean;
    }
}
export interface CpsGlobalNavExperimentalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCpsGlobalNavExperimentalElement;
}
export interface NavLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNavLinkElement;
}
declare global {
    interface HTMLCpsGlobalNavElement extends Components.CpsGlobalNav, HTMLStencilElement {
    }
    var HTMLCpsGlobalNavElement: {
        prototype: HTMLCpsGlobalNavElement;
        new (): HTMLCpsGlobalNavElement;
    };
    interface HTMLCpsGlobalNavExperimentalElementEventMap {
        "cpsGlobalNavEvent": string;
    }
    interface HTMLCpsGlobalNavExperimentalElement extends Components.CpsGlobalNavExperimental, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCpsGlobalNavExperimentalElementEventMap>(type: K, listener: (this: HTMLCpsGlobalNavExperimentalElement, ev: CpsGlobalNavExperimentalCustomEvent<HTMLCpsGlobalNavExperimentalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCpsGlobalNavExperimentalElementEventMap>(type: K, listener: (this: HTMLCpsGlobalNavExperimentalElement, ev: CpsGlobalNavExperimentalCustomEvent<HTMLCpsGlobalNavExperimentalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCpsGlobalNavExperimentalElement: {
        prototype: HTMLCpsGlobalNavExperimentalElement;
        new (): HTMLCpsGlobalNavExperimentalElement;
    };
    interface HTMLDropDownElement extends Components.DropDown, HTMLStencilElement {
    }
    var HTMLDropDownElement: {
        prototype: HTMLDropDownElement;
        new (): HTMLDropDownElement;
    };
    interface HTMLNavLinkElementEventMap {
        "cps-global-nav-event": string;
    }
    interface HTMLNavLinkElement extends Components.NavLink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNavLinkElementEventMap>(type: K, listener: (this: HTMLNavLinkElement, ev: NavLinkCustomEvent<HTMLNavLinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNavLinkElementEventMap>(type: K, listener: (this: HTMLNavLinkElement, ev: NavLinkCustomEvent<HTMLNavLinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNavLinkElement: {
        prototype: HTMLNavLinkElement;
        new (): HTMLNavLinkElement;
    };
    interface HTMLElementTagNameMap {
        "cps-global-nav": HTMLCpsGlobalNavElement;
        "cps-global-nav-experimental": HTMLCpsGlobalNavExperimentalElement;
        "drop-down": HTMLDropDownElement;
        "nav-link": HTMLNavLinkElement;
    }
}
declare namespace LocalJSX {
    interface CpsGlobalNav {
        /**
          * The text to appear at the start of the second row
         */
        "name"?: string;
    }
    interface CpsGlobalNavExperimental {
        "forceEnvironment"?: string;
        /**
          * The text to appear at the start of the second row
         */
        "name"?: string;
        "onCpsGlobalNavEvent"?: (event: CpsGlobalNavExperimentalCustomEvent<string>) => void;
    }
    interface DropDown {
        "label"?: string;
        "links"?: LinkProps[];
        "menuAlignment"?: "left" | "right";
    }
    interface NavLink {
        "disabled"?: boolean;
        "href"?: string;
        "label"?: string;
        "onCps-global-nav-event"?: (event: NavLinkCustomEvent<string>) => void;
        "openInNewTab"?: boolean;
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "cps-global-nav": CpsGlobalNav;
        "cps-global-nav-experimental": CpsGlobalNavExperimental;
        "drop-down": DropDown;
        "nav-link": NavLink;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cps-global-nav": LocalJSX.CpsGlobalNav & JSXBase.HTMLAttributes<HTMLCpsGlobalNavElement>;
            "cps-global-nav-experimental": LocalJSX.CpsGlobalNavExperimental & JSXBase.HTMLAttributes<HTMLCpsGlobalNavExperimentalElement>;
            "drop-down": LocalJSX.DropDown & JSXBase.HTMLAttributes<HTMLDropDownElement>;
            "nav-link": LocalJSX.NavLink & JSXBase.HTMLAttributes<HTMLNavLinkElement>;
        }
    }
}
