---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris Build - DEV
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  - group: terraform-containers

stages:
  # DETERMINE CHANGES FOR DEV
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          name: $(dev-build-agent)
        steps:
          - template: tasks/task_determine-changes.yml
            parameters:
              targetLabel: "DEV"
  
  # DEV: BEGIN DEPLOYMENT, TERRAFORM AND THEN CODEBASE, IF CHANGES FOUND  
  - stage: Deploy
    displayName: Deploy > DEV
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    dependsOn: Determine_Changes
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: Wait_For_Running_Builds
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: "$(System.AccessToken)"
                    
      - deployment: Log_Start
        displayName: Log Start
        dependsOn: Wait_For_Running_Builds
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - deployment: Log_Start_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn:
          - Log_Start
          - Wait_For_Running_Builds
        displayName: Log Terraform Start
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - deployment: Apply_Networking_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        displayName: Apply Networking Terraform
        dependsOn: Log_Start_Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "networking-terraform-files"
                    targetLabel: "DEV"
                    targetName: "Networking Terraform CI Deployment"
                    targetPlanName: "dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(networking-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Apply_Pipeline_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_Networking_Terraform
        displayName: Apply Pipeline Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "pipeline-terraform-files"
                    targetLabel: "DEV"
                    targetName: "Pipeline Terraform CI Deployment"
                    targetPlanName: "dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(pipeline-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Apply_Pipeline_Events_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_Pipeline_Terraform
        displayName: Apply Pipeline Events Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "pipeline-events-terraform-files"
                    targetLabel: "DEV"
                    targetName: "Pipeline Events Terraform CI Deployment"
                    targetPlanName: "dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(pipeline-events-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Update_Pipeline_Component_App_Keys
        dependsOn: Apply_Pipeline_Terraform
        displayName: Update Component Keys
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_update-app-keys-in-pipeline-components.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Pipeline Terraform CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Apply_UI_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Update_Pipeline_Component_App_Keys
        displayName: Apply UI Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "ui-terraform-files"
                    targetLabel: "DEV"
                    targetName: "UI Terraform CI Deployment"
                    targetPlanName: "dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(ui-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Apply_UI_Events_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_UI_Terraform
        displayName: Apply UI Events Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "ui-events-terraform-files"
                    targetLabel: "DEV"
                    targetName: "UI Events Terraform CI Deployment"
                    targetPlanName: "dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(ui-events-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)

      - deployment: Set_Log_Analytics_Archival_Periods
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_UI_Terraform
        displayName: Update Analytics Archival Periods
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_set-log-analytics-archival-periods.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "UI Terraform CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    armClientId: $(innovation-development-spn-client-id)
                    armClientSecret: $(innovation-development-spn-secret)
                    armTenantId: $(innovation-development-spn-tenant-id)
                    armSubscriptionId: $(innovation-development-subscription-id)
                    logRetentionTime: $(log-retention-time)
                    totalLogRetentionTime: $(total-log-retention-time)

      - deployment: Log_Result_Terraform_Ended
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        displayName: Log Terraform End
        dependsOn:
          - Apply_Pipeline_Terraform
          - Apply_Pipeline_Events_Terraform
          - Update_Pipeline_Component_App_Keys
          - Apply_UI_Terraform
          - Apply_UI_Events_Terraform
          - Set_Log_Analytics_Archival_Periods
          - Apply_Networking_Terraform
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    devOpsPatToken: "$(System.AccessToken)"

      - deployment: Log_Start_Codebase
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        dependsOn:
          - Log_Start
          - Wait_For_Running_Builds
        displayName: Log Codebase Start
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Start_Pipeline_Slots
        dependsOn: Log_Start_Codebase
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-dev-coordinator"
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-dev-pdf-generator"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start Slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-pipeline-dev"
              WebAppName: $(AppServiceName)

      - job: Start_UI_Slots
        dependsOn: Log_Start_Codebase
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris-dev"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-dev-gateway"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-dev"
              WebAppName: $(AppServiceName)

      - deployment: Deploy_Coordinator
        dependsOn: Start_Pipeline_Slots
        displayName: Deploy Coordinator
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_deploy-coordinator.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    azureSubscription: $(dev-azure-subscription)

      - deployment: Deploy_Pdf_Generator
        dependsOn: Start_Pipeline_Slots
        displayName: Deploy PDF Generator
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_deploy-pdf-generator.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    azureSubscription: $(dev-azure-subscription)

      - deployment: Deploy_Text_Extractor
        dependsOn: Start_Pipeline_Slots
        displayName: Deploy Text Extractor
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_deploy-text-extractor.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    azureSubscription: $(dev-azure-subscription)

      - deployment: Deploy_Spa
        dependsOn: Start_UI_Slots
        displayName: Deploy SPA
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_deploy-spa.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    azureSubscription: $(dev-azure-subscription)

      - deployment: Deploy_Gateway
        dependsOn: Start_UI_Slots
        displayName: Deploy Gateway
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_deploy-gateway.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    targetSuffix: "-dev"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    azureSubscription: $(dev-azure-subscription)

      - deployment: Log_Result_Codebase_Ended
        condition: and(succeeded(),eq(variables.runCodebase, 'true'))
        displayName: Log Codebase End
        dependsOn:
          - Deploy_Coordinator
          - Deploy_Pdf_Generator
          - Deploy_Text_Extractor
          - Deploy_Spa
          - Deploy_Gateway
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "Codebase CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    devOpsPatToken: "$(System.AccessToken)"

      - deployment: Log_Result_Ended
        condition: and(not(or(failed(), canceled())), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        displayName: Log Deployment End
        dependsOn:
          - Log_Result_Terraform_Ended
          - Log_Result_Codebase_Ended
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "DEV"
                    targetName: "CI Deployment"
                    appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
                    devOpsPatToken: "$(System.AccessToken)"
  
  # DEV: BEGIN SLOT SWAP PROCESS
  - stage: Swap
    displayName: Swap Slots > DEV
    dependsOn:
      - Deploy
      - Determine_Changes
    variables:
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    condition: succeeded()
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Pause_Pipeline
        dependsOn: Log_Start
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        displayName: Pause for 2 mins
        steps:
          - template: tasks/task_pause-pipeline.yml

      - job: Start_Pipeline_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-dev-coordinator"
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-dev-pdf-generator"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start Slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-pipeline-dev"
              WebAppName: $(AppServiceName)

      - job: Start_UI_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris-dev"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-dev-gateway"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-dev"
              WebAppName: $(AppServiceName)

      - job: Swap_Pipeline_Slots
        dependsOn: Start_Pipeline_Slots
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-dev-coordinator"
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-dev-pdf-generator"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              resourceGroupName: "rg-polaris-pipeline-dev"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Swap_UI_Slots
        dependsOn: Start_UI_Slots
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris-dev"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-dev-gateway"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              resourceGroupName: "rg-polaris-dev"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Log_Result
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        dependsOn:
          - Swap_Pipeline_Slots
          - Swap_UI_Slots
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"

  # DEV: CHECK FOR VALID STATUS RESPONSES FROM /API/STATUS ENDPOINTS IN SWAPPED APPS
  - stage: Check
    displayName: Status Checks > DEV
    dependsOn:
      - Swap
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Get_Status_URIs
        dependsOn: Log_Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: "-dev"
              armClientId: $(innovation-development-spn-client-id)
              armClientSecret: $(innovation-development-spn-secret)
              armTenantId: $(innovation-development-spn-tenant-id)
              armSubscriptionId: $(innovation-development-subscription-id)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Get_Status_URIs
          - Check_Coordinator
          - Check_PDF_Generator
          - Check_Text_Extractor
          - Check_Gateway
          - Check_Proxy
          - Check_SPA
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
  
  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report
    displayName: Save Report > DEV
    dependsOn:
      - Check
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Create_Commit_Report
        dependsOn: Log_Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "DEV"
              targetLabelLower: "dev"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Create_Commit_Report
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
  
  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag
    displayName: Update Tag > DEV
    dependsOn:
      - Create_Commit_Report
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Update_Github_Tag
        dependsOn: Log_Start
        steps:
          - template: tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "DEV"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Update_GitHub_Tag
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
  
  #DEV: RUN E2E TESTS AS FINAL CHECKS          
  - stage: Run_e2e_Tests
    displayName: e2e tests > DEV
    dependsOn:
      - Update_GitHub_Tag
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Run_e2e_Tests
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_run-e2e-tests.yml
            parameters:
              targetLabel: "DEV"
              buildDefinitionId: 129
              devOpsPatToken: "$(System.AccessToken)"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Run_e2e_Tests
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"

  - stage: Schedule_Releases
    displayName: Schedule Releases
    dependsOn:
      - Run_e2e_Tests
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Schedule Releases"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Schedule_Release_QA
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_schedule-release.yml
            parameters:
              targetLabel: "QA"
              buildDefinitionId: 352
              devOpsPatToken: "$(System.AccessToken)"

      - job: Schedule_Release_PROD
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_schedule-release.yml
            parameters:
              targetLabel: "PROD"
              buildDefinitionId: 353
              devOpsPatToken: "$(System.AccessToken)"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Schedule_Release_QA
          - Schedule_Release_PROD
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Schedule Releases"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
