---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris Build - DEV
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  - group: terraform-containers
    
stages:
  # DETERMINE CHANGES FOR DEV
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          name: $(dev-build-agent)
        steps:
          - template: tasks/task_determine-changes.yml
            parameters:
              targetLabel: "DEV"
  
  # DEV: BEGIN DEPLOYMENT, TERRAFORM AND THEN CODEBASE, IF CHANGES FOUND  
  - stage: Deploy
    displayName: Deploy > DEV
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    dependsOn: Determine_Changes
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: Deploy_Polaris 
        environment: "Dev"
        timeoutInMinutes: 240
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: "$(devops-pat-token)"
                      
                #download scripts artifact
                - download: PolarisBuild
                  displayName: Download Scripts
                  artifact: 'polaris-script-files'
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Started"
                      
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Networking Terraform - Started"

                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  displayName: Terraform > Download Networking terraform build
                  artifact: "networking-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init Networking
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/networking-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: "ERROR"

                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write Networking Plan
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply Main Pipeline
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"

                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Networking Terraform - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Pipeline Terraform - Started"
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init Main Pipeline
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: "ERROR"
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write Pipeline Plan
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply Main Pipeline
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                # Set Durable Extension Code app setting, post Coordinator creation
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az account set --subscription $ARM_SUBSCRIPTION_ID
                    durable_code=$(az functionapp keys list --resource-group rg-polaris-pipeline-dev --name fa-polaris-dev-coordinator --query 'systemKeys.durabletask_extension' --output tsv)
                    az functionapp config appsettings set --name fa-polaris-dev-coordinator --resource-group rg-polaris-pipeline-dev --slot "staging1" --settings "PolarisPipelineCoordinatorDurableExtensionCode=$durable_code"
                  displayName: Script > Set Durable Task Extension Code for Sliding Clear-Down
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Pipeline Terraform - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Coordinator - Started"
                
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop
                    deployToSlotOrASE: true
                    resourceGroupName: "rg-polaris-pipeline-dev"
                    slotName: "staging1"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Coordinator - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Pdf Generator - Started"
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop
                    deployToSlotOrASE: true
                    resourceGroupName: "rg-polaris-pipeline-dev"
                    slotName: "staging1"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Pdf Generator - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Text Extractor - Started"
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop
                    resourceGroupName: "rg-polaris-pipeline-dev"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Text Extractor - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Pipeline Events Terraform - Started"
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init Pipeline Events
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: "ERROR"
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write Pipeline Events Plan
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply Pipeline Events
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Pipeline Events Terraform - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: UI Terraform - Started"
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init UI Terraform
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: "ERROR"
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write UI Plan
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply UI Terraform
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: UI Terraform - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish SPA - Started"
                
                #download UI build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: 'Deploy SPA App Service to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-dev"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop
                    deployToSlotOrASE: true
                    resourceGroupName: "rg-polaris-dev"
                    slotName: "staging1"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish SPA - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Gateway - Started"
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  displayName: 'Deploy Gateway Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop
                    deployToSlotOrASE: true
                    resourceGroupName: "rg-polaris-dev"
                    slotName: "staging1"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runCodebase, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Publish Gateway - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Set Log Analytics Archival Periods - Started"
                
                # Set Log Analytics Archival Period - remove when supported natively by Terraform
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az account set --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppEvents --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppRequests --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppServiceConsoleLogs --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                  displayName: Script > Set Log Analytics Archival Periods
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    LOG_RETENTION_TIME: $(log-retention-time)
                    TOTAL_LOG_RETENTION_TIME: $(total-log-retention-time)
                    TF_LOG: "ERROR"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Set Log Analytics Archival Periods - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: UI Events Terraform - Started"
                
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init UI Events
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: "ERROR"
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write UI Events Plan
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply UI Events
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: "ERROR"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: and(succeeded(), eq(variables.runTerraform, 'true'))
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: UI Events Terraform - Completed"
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Completed"
                
                #send any errors to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Record Errors'
                  condition: failed()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PatToken: "$(devops-pat-token)"
                      -PipelineName "$(resources.pipeline.PolarisBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.PolarisBuild.sourceCommit)"
                      -ReleaseId "$(Build.BuildId)"
                      -BuildName "$(resources.pipeline.PolarisBuild.runName)"
                      -Message "DEV CI Deployment: Failed"    

  # DEV: BEGIN SLOT SWAP PROCESS
  - stage: Swap
    displayName: Swap Slots > DEV
    dependsOn: 
      - Deploy
      - Determine_Changes
    variables:
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    condition: succeeded()
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
          
      - job: Pause_Pipeline
        dependsOn: Log_Start
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        displayName: Pause for 2 mins
        steps:
          - template: tasks/task_pause-pipeline.yml

      - job: Start_Pipeline_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-dev-coordinator"
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-dev-pdf-generator"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start Slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-pipeline-dev"
              WebAppName: $(AppServiceName)

      - job: Start_UI_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris-dev"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-dev-gateway"
        displayName: Start Staging1
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Start slot
            inputs:
              Action: "Start Azure App Service"
              SpecifySlotOrASE: true
              Slot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              ResourceGroupName: "rg-polaris-dev"
              WebAppName: $(AppServiceName)

      - job: Swap_Pipeline_Slots
        dependsOn: Start_Pipeline_Slots
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-dev-coordinator"
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-dev-pdf-generator"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              resourceGroupName: "rg-polaris-pipeline-dev"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Swap_UI_Slots
        dependsOn: Start_UI_Slots
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris-dev"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-dev-gateway"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(dev-azure-subscription)
              resourceGroupName: "rg-polaris-dev"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Log_Result
        condition: and(succeeded(), eq(variables.runCodebase, 'true'))
        dependsOn:
          - Swap_Pipeline_Slots
          - Swap_UI_Slots
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"

  # DEV: CHECK FOR VALID STATUS RESPONSES FROM /API/STATUS ENDPOINTS IN SWAPPED APPS
  - stage: Check
    displayName: Status Checks > DEV
    dependsOn: 
      - Swap
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
        
      - job: Get_Status_URIs
        dependsOn: Log_Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: "-dev"
              armClientId: $(innovation-development-spn-client-id)
              armClientSecret: $(innovation-development-spn-secret)
              armTenantId: $(innovation-development-spn-tenant-id)
              armSubscriptionId: $(innovation-development-subscription-id)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)
          
      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Get_Status_URIs
          - Check_Coordinator
          - Check_PDF_Generator
          - Check_Text_Extractor
          - Check_Gateway
          - Check_Proxy
          - Check_SPA
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"
            
  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report
    displayName: Save Report > DEV
    dependsOn: 
      - Check
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Create_Commit_Report
        dependsOn: Log_Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "DEV"
              targetLabelLower: "dev"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Create_Commit_Report
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"
  
  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag
    displayName: Update Tag > DEV
    dependsOn: 
      - Create_Commit_Report
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              
      - job: Update_Github_Tag
        dependsOn: Log_Start
        steps:
          - template: tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "DEV"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Update_GitHub_Tag
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"
  
  #DEV: RUN E2E TESTS AS FINAL CHECKS          
  - stage: Run_e2e_Tests
    displayName: e2e tests > DEV
    dependsOn: 
      - Update_GitHub_Tag
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Run_e2e_Tests
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_run-e2e-tests.yml
            parameters:
              targetLabel: "DEV"
              buildDefinitionId: 129
              devOpsPatToken: "$(devops-pat-token)"
      
      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Run_e2e_Tests
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"
              
  - stage: Schedule_Releases
    displayName: Schedule Releases
    dependsOn:
      - Run_e2e_Tests
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Schedule Releases"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"

      - job: Schedule_Release_QA
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_schedule-release.yml
            parameters:
              targetLabel: "QA"
              buildDefinitionId: 352
              devOpsPatToken: "$(devops-pat-token)"
              
      - job: Schedule_Release_PROD
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_schedule-release.yml
            parameters:
              targetLabel: "PROD"
              buildDefinitionId: 353
              devOpsPatToken: "$(devops-pat-token)"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Schedule_Release_QA
          - Schedule_Release_PROD
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "DEV"
              targetName: "Schedule Releases"
              appInsightsKey: "$(innovation-development-app-insights-instrumentation-key)"
              devOpsPatToken: "$(devops-pat-token)"
