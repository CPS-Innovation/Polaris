---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris Build Codebase - UAT
      trigger: true
            
pool:
  name: $(uat-build-agent)

variables:
  - group: kv-uat-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints

stages:
  # UAT: BEGIN DEPLOYMENT, JUST THE CODEBASE  
  - stage: Deploy
    displayName: Deploy
    condition: succeeded()
    jobs:
      - job: Log_Start_Codebase
        condition: succeeded()
        displayName: Log Codebase Start
        steps:
          - template: tasks/task_log-start-deployment.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Codebase Only CI Deployment"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"

      - job: Deploy_Coordinator
        dependsOn: Log_Start_Codebase
        displayName: Deploy Coordinator
        condition: succeeded()
        steps:
          - template: tasks/task_deploy-coordinator.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Coordinator Deployment"
              targetSuffix: "-uat"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"
              azureSubscription: $(uat-azure-subscription)

      - job: Log_Result_Codebase_Ended
        condition: succeeded()
        displayName: Log Codebase End
        dependsOn: Deploy_Coordinator
        steps:
          - template: tasks/task_log-result-deployment.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Codebase Only CI Deployment"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
  
  # UAT: BEGIN SLOT SWAP PROCESS
  - stage: Swap
    displayName: Swap Slots
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: succeeded()
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"

      - job: Pause_Pipeline
        dependsOn: Log_Start
        condition: succeeded()
        displayName: Pause for 2 mins
        steps:
          - template: tasks/task_pause-pipeline.yml

      - job: Swap_Pipeline_Slots
        dependsOn: Pause_Pipeline
        condition: succeeded()
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-uat-coordinator"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(uat-azure-subscription)
              resourceGroupName: "rg-polaris-pipeline-uat"
              webAppName: $(AppServiceName)
              PreserveVnet: true
              
      - job: Log_Result
        condition: succeeded()
        dependsOn: Swap_Pipeline_Slots
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
              
  # UAT: CHECK FOR VALID STATUS RESPONSES FROM /API/STATUS ENDPOINTS IN SWAPPED APPS
  - stage: Check_Status
    displayName: Status Checks
    dependsOn: Swap
    condition: succeeded()
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: succeeded()
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"

      - job: Get_Status_URIs
        dependsOn: Log_Start
        condition: succeeded()
        steps:
          - template: tasks/task_get-credentials.yml
            parameters:
              azureSubscriptionId: $(uat-azure-subscription)
              
          - template: tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: "-uat"
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Log_Result
        condition: succeeded()
        dependsOn:
          - Log_Start
          - Get_Status_URIs
          - Check_Coordinator
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "UAT"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-uat-app-insights-instrumentation-key)"
              devOpsPatToken: "$(System.AccessToken)"
