---

stages:
  - stage: Publish_Artifacts
    displayName: Publish Pipeline Scripts
    jobs:
      - job: Build_Pipeline_Scripts
        steps:
          - task: PublishPipelineArtifact@1
            displayName: "Publish pipeline scripts"
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-devops-pipelines/scripts"
              artifact: "polaris-script-files"
              publishLocation: "pipeline"

      - job: Build_Pipeline_Terraform_Artifacts
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-terraform/"
              artifact: "pipeline-terraform-files"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline events terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-events-terraform/"
              artifact: "pipeline-events-terraform-files"
              publishLocation: "pipeline"

      - job: Build_UI_Terraform_Artifacts
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI terraform artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-terraform/ui-terraform/'
              artifact: 'ui-terraform-files'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI events terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/ui-events-terraform/"
              artifact: "ui-events-terraform-files"
              publishLocation: "pipeline"

      - job: Build_Coordinator_Artifact
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/coordinator/coordinator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Build Coordinator artifact"
          
          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/coordinator'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"Coordinator`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/coordinator"
              artifact: "polaris-coordinator-drop"
            displayName: "Publish Coordinator artifact"

      - job: Build_Pdf_Generator_Artifact
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: 'Aspose.Total.NET.lic'
            displayName: 'Download Aspose Licence'

          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: 'polaris-pipeline/pdf-generator'
              OverWrite: true
            displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/pdf-generator/pdf-generator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion) --verbosity detailed"
              zipAfterPublish: false
            displayName: "Build PDF-Generator artifact"
          
          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/pdf-generator'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"PDF Generator`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/pdf-generator"
              artifact: "polaris-pdf-generator-drop"
            displayName: "Publish PDF-Generator codebase artifact"

      - job: Build_Pdf_Redactor_Artifact
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: 'Aspose.Total.NET.lic'
            displayName: 'Download Aspose Licence'

          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: 'polaris-pipeline/pdf-redactor'
              OverWrite: true
            displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/pdf-redactor/pdf-redactor.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Build PDF-Redactor artifact"
          
          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/pdf-redactor'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"PDF Redactor`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/pdf-redactor"
              artifact: "polaris-pdf-redactor-drop"
            displayName: "Publish PDF-Redactor codebase artifact"

      - job: Build_Text_Extractor_Artifact
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/text-extractor/text-extractor.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Build Text-Extractor artifact"
          
          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/text-extractor'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"Text Extractor`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/text-extractor"
              artifact: "polaris-text-extractor-drop"
            displayName: "Publish Text-Extractor artifact"

      - job: Build_Gateway_Artifact
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Build Gateway artifact"
          
          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/polaris-gateway'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"Gateway`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-gateway"
              artifact: "polaris-gateway-drop"
            displayName: "Publish Gateway artifact"
            
      - job: Build_Maintenance_Function_Artifact
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-maintenance/polaris-maintenance.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Build Maintenance Function artifact"

          # Add build version
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Build.ArtifactStagingDirectory)/polaris-maintenance'
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"Maintenance Function`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"
            displayName: "Record version details"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-maintenance"
              artifact: "polaris-maintenance-drop"
            displayName: "Publish Maintenance Function artifact"

      - job: Build_SPA_Artifacts
        steps:
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            inputs:
              contents: |
                polaris-ui/.env

          # Add build version
          - task: PowerShell@2
            displayName: "Record build version"
            inputs:
              targetType: 'inline'
              workingDirectory: polaris-ui/public
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"ui`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"

          - task: Npm@1
            inputs:
              command: "install"
              workingDir: "polaris-ui"
            displayName: "npm install"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build"
            displayName: "npm build"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/build"
              ArtifactName: "polaris-ui-drop"
              publishLocation: "Container"
            displayName: Publish UI artifact