---
parameters:
  - name: targetEnv
    type: string
  - name: targetBuild
    type: string
  - name: targetLabel
    type: string
  - name: appInsightsKey
    type: string
  - name: azureSubscription
    type: string
  - name: targetPlanName
    type: string
  - name: terraformStorageAccount
    type: string
  - name: pipelineTerraformContainerName
    type: string
  - name: uiTerraformContainerName
    type: string
  - name: terraformStateKey
    type: string
  - name: terraformStateAccessKey
    type: string
  - name: targetSuffix
    type: string
  - name: logRetentionTime
    type: string
  - name: totalLogRetentionTime
    type: string
  
stages:
  - stage: Apply
    displayName: Apply Terraform
    jobs:
      - deployment: Wait_For_Running_Builds
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)

      - deployment: Log_Start_Terraform
        condition: succeeded()
        dependsOn: Wait_For_Running_Builds
        displayName: Log Start
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: ${{ parameters.appInsightsKey }}

      - deployment: Apply_Pipeline_Terraform
        condition: succeeded()
        dependsOn: Log_Start_Terraform
        displayName: Apply Pipeline Terraform
        environment: ${{ parameters.targetEnv }}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: ${{ parameters.azureSubscription }}

                - template: jobs/tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetTerraformArtifact: "pipeline-terraform-files"
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Pipeline Terraform CI Deployment"
                    targetPlanName: ${{ parameters.targetPlanName }}
                    appInsightsKey: ${{ parameters.appInsightsKey }}
                    terraformStorageAccount: ${{ parameters.terraformStorageAccount }}
                    terraformContainerName: ${{ parameters.pipelineTerraformContainerName }}
                    terraformStateKey: ${{ parameters.terraformStateKey }}
                    terraformStateAccessKey: ${{ parameters.terraformStateAccessKey }}
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Apply_UI_Terraform
        condition: succeeded()
        dependsOn: Apply_Pipeline_Terraform
        displayName: Apply UI Terraform
        environment: ${{ parameters.targetEnv }}
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: ${{ parameters.azureSubscription }}

                - template: jobs/tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetTerraformArtifact: "ui-terraform-files"
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "UI Terraform CI Deployment"
                    targetPlanName: ${{ parameters.targetPlanName }}
                    appInsightsKey: ${{ parameters.appInsightsKey }}
                    terraformStorageAccount: ${{ parameters.terraformStorageAccount }}
                    terraformContainerName: ${{ parameters.uiTerraformContainerName }}
                    terraformStateKey: ${{ parameters.terraformStateKey }}
                    terraformStateAccessKey: ${{ parameters.terraformStateAccessKey }}
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Set_Log_Analytics_Archival_Periods
        condition: succeeded()
        dependsOn: Apply_UI_Terraform
        displayName: Update Analytics Archival Periods
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: ${{ parameters.azureSubscription }}

                - template: jobs/tasks/task_set-log-analytics-archival-periods.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Set Log Analytics Archival Periods"
                    targetSuffix: ${{ parameters.targetSuffix }}
                    appInsightsKey: ${{ parameters.appInsightsKey }}
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    logRetentionTime: ${{ parameters.logRetentionTime }}
                    totalLogRetentionTime: ${{ parameters.totalLogRetentionTime }}

      - deployment: Log_Result_Terraform_Ended
        condition: succeeded()
        displayName: Log End
        dependsOn:
          - Apply_Pipeline_Terraform
          - Apply_UI_Terraform
          - Set_Log_Analytics_Archival_Periods
        environment: ${{ parameters.targetEnv }}
        strategy:
          runOnce:
            deploy:
              steps:
                - template: jobs/tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: ${{ parameters.targetBuild }}
                    targetLabel: ${{ parameters.targetLabel }}
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: ${{ parameters.appInsightsKey }}
                    devOpsPatToken: $(System.AccessToken)