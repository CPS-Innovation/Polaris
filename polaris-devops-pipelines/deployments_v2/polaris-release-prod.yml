---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris Build - PROD
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts  

pool:
  name: $(prod-build-agent)

variables:
  - group: kv-prod-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  - group: terraform-containers

stages:
  # DETERMINE CHANGES FOR PROD
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        workspace:
          clean: all
        steps:
          - template: stages/jobs/tasks/task_determine-changes.yml
            parameters:
              targetLabel: "PROD"

  # PROD: BEGIN DEPLOYMENT, TERRAFORM AND THEN CODEBASE, IF CHANGES FOUND  
  - stage: Apply
    displayName: Apply Terraform
    condition: succeeded()
    variables:
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
      maintenanceFunctionCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.MAINTENANCE_FUNCTION_COUNT']]
    dependsOn: Determine_Changes
    jobs:
      - deployment: Wait_For_Running_Builds
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)

      - deployment: Log_Start_Terraform
        condition: succeeded()
        dependsOn: Wait_For_Running_Builds
        displayName: Log Start
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
                    
      - job: Send_Start_Message
        displayName: Send Message to Teams
        condition: succeeded()
        dependsOn: Wait_For_Running_Builds
        continueOnError: false
        steps:
          - template: stages/jobs/tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              maintenanceFunctionCount: $(maintenanceFunctionCount)
              messageTitle: "Polaris Release to PROD started"
              buildResultsTitle: "View Progress"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=false&type=publishedArtifacts"

      - deployment: Apply_Pipeline_Terraform
        condition: succeeded()
        dependsOn: Log_Start_Terraform
        displayName: Apply Pipeline Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: stages/jobs/tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "pipeline-terraform-files"
                    targetLabel: "PROD"
                    targetName: "Pipeline Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(pipeline-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Apply_UI_Terraform
        condition: succeeded()
        dependsOn: Apply_Pipeline_Terraform
        displayName: Apply UI Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: stages/jobs/tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "ui-terraform-files"
                    targetLabel: "PROD"
                    targetName: "UI Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(ui-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Set_Log_Analytics_Archival_Periods
        condition: succeeded()
        dependsOn: Apply_UI_Terraform
        displayName: Update Analytics Archival Periods
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: stages/jobs/tasks/task_set-log-analytics-archival-periods.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Set Log Analytics Archival Periods"
                    targetSuffix: ""
                    appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    logRetentionTime: $(log-retention-time)
                    totalLogRetentionTime: $(total-log-retention-time)

      - deployment: Log_Result_Terraform_Ended
        condition: succeeded()
        displayName: Log End
        dependsOn:
          - Apply_Pipeline_Terraform
          - Apply_UI_Terraform
          - Set_Log_Analytics_Archival_Periods
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: stages/jobs/tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
                    devOpsPatToken: $(System.AccessToken)
                    
  - template: stages/stage_deploy-codebase.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
      targetSuffix: ""
      azureSubscription: $(prod-azure-subscription)

  - template: stages/stage_swap-slots.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
      targetSuffix: ""
      azureSubscription: $(prod-azure-subscription)

  - template: stages/stage_check-status.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
      targetSuffix: ""
      azureSubscription: $(prod-azure-subscription)
      statusCheckMethod: $(status-check-method)
      statusCheckRetries: $(status-check-retries)
      statusCheckDelaySeconds: $(status-check-delay-seconds)
      statusCheckTimeoutSeconds: $(status-check-timeout-seconds)

  - template: stages/stage_create-commit-report.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      targetLabelLower: "prod"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)

  - template: stages/stage_update-git-hub-tag.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)

  - template: stages/stage_run-e2e-tests.yml
    parameters:
      targetBuild: PolarisBuild
      targetLabel: "PROD"
      appInsightsKey: $(innovation-prod-app-insights-instrumentation-key)
      buildDefinitionId: 240
      stageDependsOn: Update_GitHub_Tag
              
  - stage: Send_Success_Report
    displayName: Send Success Report
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    variables:
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
      maintenanceFunctionCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.MAINTENANCE_FUNCTION_COUNT']]
    condition: succeeded()
    jobs:
      - job: Send_Success_Report
        displayName: Send Success Report
        steps:
          - template: stages/jobs/tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              maintenanceFunctionCount: $(maintenanceFunctionCount)
              messageTitle: "✔ Polaris Release to PROD Completed!"
              buildResultsTitle: "View Release Commits"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=false&type=publishedArtifacts"
              
  - stage: Send_Failure_Report
    displayName: Send Failure Report
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    variables:
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
      maintenanceFunctionCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.MAINTENANCE_FUNCTION_COUNT']]
    condition: or(failed(), canceled())
    jobs:
      - job: Send_Failure_Report
        displayName: Send Failure Report
        steps:
          - template: stages/jobs/tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              maintenanceFunctionCount: $(maintenanceFunctionCount)
              messageTitle: "❗ Polaris Release to PROD failed!"
              buildResultsTitle: "View Failure Details"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=results"
