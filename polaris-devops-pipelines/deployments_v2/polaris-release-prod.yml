---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris Build - PROD
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts  

pool:
  name: $(prod-build-agent)

variables:
  - group: kv-prod-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  - group: terraform-containers

stages:
  # DETERMINE CHANGES FOR PROD
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        workspace:
          clean: all
        steps:
          - template: tasks/task_determine-changes.yml
            parameters:
              targetLabel: "PROD"

  # PROD: BEGIN DEPLOYMENT, TERRAFORM AND THEN CODEBASE, IF CHANGES FOUND  
  - stage: Apply
    displayName: Apply Terraform
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
    dependsOn: Determine_Changes
    jobs:
      - deployment: Wait_For_Running_Builds
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)

      - deployment: Log_Start
        displayName: Log Start
        dependsOn: Wait_For_Running_Builds
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "CI Deployment"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - deployment: Log_Start_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn:
          - Log_Start
          - Wait_For_Running_Builds
        displayName: Log Terraform Start
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-start-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    
      - job: Send_Start_Message
        displayName: Send Message to Teams
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Wait_For_Running_Builds
        continueOnError: false
        steps:
          - template: tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              messageTitle: "Polaris Release to PROD started"
              buildResultsTitle: "View Progress"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=false&type=publishedArtifacts"

      - deployment: Apply_Pipeline_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Log_Start_Terraform
        displayName: Apply Pipeline Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "pipeline-terraform-files"
                    targetLabel: "PROD"
                    targetName: "Pipeline Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(pipeline-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Apply_Pipeline_Events_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_Pipeline_Terraform
        displayName: Apply Pipeline Events Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "pipeline-events-terraform-files"
                    targetLabel: "PROD"
                    targetName: "Pipeline Events Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(pipeline-events-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Apply_UI_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_Pipeline_Terraform
        displayName: Apply UI Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "ui-terraform-files"
                    targetLabel: "PROD"
                    targetName: "UI Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(ui-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Apply_UI_Events_Terraform
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_UI_Terraform
        displayName: Apply UI Events Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: tasks/task_apply-terraform.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetTerraformArtifact: "ui-events-terraform-files"
                    targetLabel: "PROD"
                    targetName: "UI Events Terraform CI Deployment"
                    targetPlanName: "prod"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(ui-events-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

      - deployment: Set_Log_Analytics_Archival_Periods
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        dependsOn: Apply_UI_Events_Terraform
        displayName: Update Analytics Archival Periods
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(prod-azure-subscription)
                    
                - template: tasks/task_set-log-analytics-archival-periods.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Set Log Analytics Archival Periods"
                    targetSuffix: ""
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    logRetentionTime: $(log-retention-time)
                    totalLogRetentionTime: $(total-log-retention-time)

      - deployment: Log_Result_Terraform_Ended
        condition: succeeded()
        displayName: Log Terraform End
        dependsOn:
          - Apply_Pipeline_Terraform
          - Apply_Pipeline_Events_Terraform
          - Apply_UI_Terraform
          - Apply_UI_Events_Terraform
          - Set_Log_Analytics_Archival_Periods
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: tasks/task_log-result-deployment.yml
                  parameters:
                    targetBuild: PolarisBuild
                    targetLabel: "PROD"
                    targetName: "Terraform CI Deployment"
                    appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
                    devOpsPatToken: $(System.AccessToken)
                    
  - stage: Deploy
    displayName: Deploy
    condition: succeeded()
    variables:
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
    dependsOn:
      - Determine_Changes
      - Apply
    jobs:
      - job: Log_Start_Codebase
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        displayName: Log Codebase Start
        steps:
          - template: tasks/task_log-start-deployment.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Codebase CI Deployment"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Deploy_Coordinator
        dependsOn: Log_Start_Codebase
        displayName: Deploy Coordinator
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-coordinator.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Coordinator Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Deploy_Pdf_Generator
        dependsOn: Log_Start_Codebase
        displayName: Deploy PDF Generator
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-pdf-generator.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "PDF Generator Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Deploy_Pdf_Redactor
        dependsOn: Log_Start_Codebase
        displayName: Deploy PDF Redactor
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-pdf-redactor.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "PDF Redactor Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Deploy_Text_Extractor
        dependsOn: Log_Start_Codebase
        displayName: Deploy Text Extractor
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-text-extractor.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Text Extractor Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Deploy_Spa
        dependsOn: Log_Start_Codebase
        displayName: Deploy SPA
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-spa.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "SPA Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Deploy_Gateway
        dependsOn: Log_Start_Codebase
        displayName: Deploy Gateway
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_deploy-gateway.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Gateway Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)

      - job: Log_Result_Codebase_Ended
        condition: succeeded()
        displayName: Log Codebase End
        dependsOn:
          - Deploy_Coordinator
          - Deploy_Pdf_Generator
          - Deploy_Pdf_Redactor
          - Deploy_Text_Extractor
          - Deploy_Spa
          - Deploy_Gateway
        steps:
          - template: tasks/task_log-result-deployment.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Codebase CI Deployment"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)

      - job: Log_Result_Ended
        condition: and(not(or(failed(), canceled())), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        displayName: Log Deployment End
        dependsOn: Log_Result_Codebase_Ended
        steps:
          - template: tasks/task_log-result-deployment.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "CI Deployment"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)

  # PROD: BEGIN SLOT SWAP PROCESS
  - stage: Swap
    displayName: Swap Slots
    dependsOn:
      - Determine_Changes
      - Apply
      - Deploy
    variables:
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
    condition: succeeded()
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Pause_Pipeline
        dependsOn: Log_Start
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        displayName: Pause for 2 mins
        steps:
          - template: tasks/task_pause-pipeline.yml
            
      - job: Swap_Coordinator_Slot
        dependsOn: Pause_Pipeline
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        strategy:
          matrix:
            Coordinator:
              Name: "Coordinator"
              AppServiceName: "fa-polaris-coordinator"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(prod-azure-subscription)
              resourceGroupName: "rg-polaris-coordinator"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Swap_Pipeline_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        strategy:
          matrix:
            PDFGenerator:
              Name: "PDF Generator"
              AppServiceName: "fa-polaris-pdf-generator"
            PDFRedactor:
              Name: "PDF Redactor"
              AppServiceName: "fa-polaris-pdf-redactor"
            TextExtractor:
              Name: "Text Extractor"
              AppServiceName: "fa-polaris-text-extractor"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(prod-azure-subscription)
              resourceGroupName: "rg-polaris-pipeline"
              webAppName: $(AppServiceName)
              PreserveVnet: true
              
      - job: Swap_UI_Slots
        dependsOn: Pause_Pipeline
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        strategy:
          matrix:
            SPA:
              Name: "SPA"
              AppServiceName: "as-web-polaris"
            PolarisGateway:
              Name: "Polaris Gateway"
              AppServiceName: "fa-polaris-gateway"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(prod-azure-subscription)
              resourceGroupName: "rg-polaris"
              webAppName: $(AppServiceName)
              PreserveVnet: true
              
      - job: Swap_Proxy_Slot
        dependsOn: Pause_Pipeline
        condition: and(succeeded(),eq(variables.runTerraform, 'true'))
        strategy:
          matrix:
            Proxy:
              Name: "Proxy"
              AppServiceName: "polaris-cmsproxy"
        displayName: Swap
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            displayName: Swap slot
            inputs:
              action: "Swap Slots"
              sourceSlot: "staging1"
              azureSubscription: $(prod-azure-subscription)
              resourceGroupName: "rg-polaris"
              webAppName: $(AppServiceName)
              PreserveVnet: true

      - job: Log_Result
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Swap_Coordinator_Slot
          - Swap_Pipeline_Slots
          - Swap_UI_Slots
          - Swap_Proxy_Slot
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Swap Polaris Codebase Slots"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)
              
  # PROD: CHECK FOR VALID STATUS RESPONSES FROM /API/STATUS ENDPOINTS IN SWAPPED APPS
  - stage: Check_Status
    displayName: Status Checks
    dependsOn:
      - Swap
      - Determine_Changes
    condition: succeeded()
    variables:
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Get_Status_URIs
        dependsOn: Log_Start
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_get-credentials.yml
            parameters:
              azureSubscription: $(prod-azure-subscription)
              
          - template: tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: ""
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_PDF_Redactor
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfRedactorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "PDF Redactor"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetry.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: $(resources.pipeline.PolarisBuild.runName)

      - job: Log_Result
        condition: and(succeeded(),or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Get_Status_URIs
          - Check_Coordinator
          - Check_PDF_Generator
          - Check_PDF_Redactor
          - Check_Text_Extractor
          - Check_Gateway
          - Check_Proxy
          - Check_SPA
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Status Checks"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)
              
  # PROD: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report
    displayName: Save Report
    dependsOn:
      - Check_Status
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Create_Commit_Report
        dependsOn: Log_Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "PROD"
              targetLabelLower: "prod"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Create_Commit_Report
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Create Commit Report"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)

  # PROD: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag
    displayName: Update Tag
    dependsOn:
      - Create_Commit_Report
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Update_Github_Tag
        dependsOn: Log_Start
        steps:
          - template: tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "PROD"

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Update_GitHub_Tag
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "Update GitHub Tag"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)

  #PROD: RUN E2E TESTS AS FINAL CHECKS          
  - stage: Run_e2e_Tests
    displayName: e2e tests
    dependsOn:
      - Update_GitHub_Tag
      - Determine_Changes
    condition: succeeded()
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
    jobs:
      - job: Log_Start
        displayName: Log Start
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        steps:
          - template: tasks/task_log-start.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"

      - job: Run_e2e_Tests
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn: Log_Start
        steps:
          - template: tasks/task_run-e2e-tests.yml
            parameters:
              targetLabel: "PROD"
              buildDefinitionId: 240
              devOpsPatToken: $(System.AccessToken)

      - job: Log_Result
        condition: and(succeeded(), or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true')))
        dependsOn:
          - Log_Start
          - Run_e2e_Tests
        steps:
          - template: tasks/task_log-result.yml
            parameters:
              targetBuild: PolarisBuild
              targetLabel: "PROD"
              targetName: "e2e Tests"
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              devOpsPatToken: $(System.AccessToken)
              
  - stage: Send_Success_Report
    displayName: Send Success Report
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
    condition: succeeded()
    jobs:
      - job: Send_Success_Report
        displayName: Send Success Report
        condition: or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true'))
        steps:
          - template: tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              messageTitle: "✔ Polaris Release to PROD Completed!"
              buildResultsTitle: "View Release Commits"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=artifacts&pathAsName=false&type=publishedArtifacts"
              
  - stage: Send_Failure_Report
    displayName: Send Failure Report
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TERRAFORM']]
      runCodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_CODEBASE']]
      pipelineTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PIPELINE_TERRAFORM_COUNT']]
      uiTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_TERRAFORM_COUNT']]
      networkingTerraformCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.NETWORKING_TERRAFORM_COUNT']]
      coordinatorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COORDINATOR_COUNT']]
      pdfGeneratorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_GENERATOR_COUNT']]
      pdfRedactorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.PDF_REDACTOR_COUNT']]
      textExtractorCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.TEXT_EXTRACTOR_COUNT']]
      gatewayCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.GATEWAY_COUNT']]
      uiCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.UI_COUNT']]
      ddeiClientCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.DDEI_CLIENT_COUNT']]
      commonLibraryCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.COMMON_LIBRARY_COUNT']]
      e2eCount: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.E2E_TESTS_COUNT']]
    condition: or(failed(), canceled())
    jobs:
      - job: Send_Failure_Report
        displayName: Send Failure Report
        condition: or(eq(variables.runTerraform, 'true'),eq(variables.runCodebase, 'true'))
        steps:
          - template: tasks/task_send-progress-message-to-teams.yml
            parameters:
              webhookUrl: $(ddei-webhook-url)
              devOpsPatToken: $(System.AccessToken)
              stageName: "Deploy"
              commitId: $(resources.pipeline.PolarisBuild.sourceCommit)
              buildVersion: $(resources.pipeline.PolarisBuild.runName)
              pipelineTerraformCount: $(pipelineTerraformCount)
              uiTerraformCount: $(uiTerraformCount)
              networkingTerraformCount: $(networkingTerraformCount)
              coordinatorCount: $(coordinatorCount)
              pdfGeneratorCount: $(pdfGeneratorCount)
              pdfRedactorCount: $(pdfRedactorCount)
              textExtractorCount: $(textExtractorCount)
              gatewayCount: $(gatewayCount)
              uiCount: $(uiCount)
              ddeiClientCount: $(ddeiClientCount)
              commonLibraryCount: $(commonLibraryCount)
              e2eCount: $(e2eCount)
              messageTitle: "❗ Polaris Release to PROD failed!"
              buildResultsTitle: "View Failure Details"
              buildResultsUrl: "https://dev.azure.com/CPSDTS/Information%20Management/_build/results?buildId=$(Build.BuildId)&view=results"
