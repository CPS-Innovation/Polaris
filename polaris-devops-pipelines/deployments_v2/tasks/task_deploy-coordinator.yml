---
parameters:
  - name: targetBuild
    type: string
  - name: targetLabel
    type: string
  - name: targetSuffix
    type: string
  - name: appInsightsKey
    type: string
  - name: azureSubscription
    type: string
  
steps:
  # download scripts artifact
  - download: ${{ parameters.targetBuild }}
    displayName: Download Scripts
    artifact: 'polaris-script-files'

  # send custom event to AppInsights
  - template: task_send-to-app-insights.yml
    parameters:
      appInsightsKey: ${{ parameters.appInsightsKey }}
      targetBuild: ${{ parameters.targetBuild }}
      message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Coordinator - Started"

  # download coordinator build artifact
  - download: ${{ parameters.targetBuild }}
    displayName: Deploy > Download Coordinator Codebase Build
    artifact: "polaris-coordinator-drop"

  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    displayName: 'Deploy Coordinator Azure Function App to ${{ parameters.targetLabel }}'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      appType: functionAppLinux
      appName: "fa-polaris${{ parameters.targetSuffix }}-coordinator"
      package: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-coordinator-drop
      deployToSlotOrASE: true
      resourceGroupName: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
      slotName: "staging1"

  # send custom event to AppInsights
  - template: task_send-to-app-insights.yml
    parameters:
      appInsightsKey: ${{ parameters.appInsightsKey }}
      targetBuild: ${{ parameters.targetBuild }}
      message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Coordinator - Completed"