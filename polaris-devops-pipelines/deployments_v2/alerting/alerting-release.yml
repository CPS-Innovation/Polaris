---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisAlertingBuild
      source: Polaris Alerting Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts
            
variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: terraform-containers
    
pool:
  vmImage: ubuntu-latest

stages:
  - stage: Apply_DEV
    displayName: DEV > Apply Terraform
    jobs:
      - deployment: Apply_Alerting_Terraform
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(dev-azure-subscription)
                    
                - template: ../tasks/task_apply-alerting-terraform.yml
                  parameters:
                    targetBuild: PolarisAlertingBuild
                    targetTerraformArtifact: "alerting-terraform-files"
                    targetLabel: "DEV"
                    targetName: "Alerting Terraform CI Deployment"
                    targetPlanName: "dev"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(alerting-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    
  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_DEV
    displayName: DEV > Save Report
    dependsOn: Apply_DEV
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "DEV"
              targetLabelLower: "dev"

  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_DEV
    displayName: DEV > Update Tag
    dependsOn: Create_Commit_Report_DEV
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "DEV"

  # QA Apply to QA
  - stage: Apply_QA
    displayName: QA > Apply Terraform
    dependsOn: Update_GitHub_Tag_DEV
    condition: succeeded()
    jobs:
      - deployment: Apply_Alerting_Terraform
        environment: "QA"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(qa-azure-subscription)
                    
                - template: ../tasks/task_apply-alerting-terraform.yml
                  parameters:
                    targetBuild: PolarisAlertingBuild
                    targetTerraformArtifact: "alerting-terraform-files"
                    targetLabel: "QA"
                    targetName: "Alerting Terraform CI Deployment"
                    targetPlanName: "qa"
                    terraformStorageAccount: $(qa-terraform-storage-account)
                    terraformContainerName: $(alerting-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsqastorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    
  # notifications NOT enabled in QA - if enabling this stage then remember to modify the "dependsOn" attribute of the subsequent stage
  #- stage: Deploy_QA
  #  displayName: QA > Deploy Apps
  #  dependsOn: Apply_QA
  #  condition: succeeded()
  #  pool:
  #    name: $(qa-build-agent)
  #  jobs:
  #    - job: Deploy_Logic_Apps
  #      steps:
  #        - template: ../tasks/task_get-credentials.yml
  #          parameters:
  #            azureSubscriptionId: $(qa-azure-subscription)
  #
  #        - template: ../tasks/task_deploy-alert-processor.yml
  #          parameters:
  #            targetBuild: PolarisAlertingBuild
  #            targetLabel: "QA"
  #            targetName: "Alert Processor CI Deployment"
  #            targetSuffix: "-qa"
  #            appInsightsKey: "$(innovation-qa-app-insights-instrumentation-key)"
  #            azureSubscription: $(qa-azure-subscription)
  #            azureSubscriptionId: $(subscriptionId)
  #            targetResourceGroup: rg-polaris-analytics-qa

  # QA: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_QA
    displayName: QA > Save Report
    dependsOn: Apply_QA
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "QA"
              targetLabelLower: "qa"

  # QA: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_QA
    displayName: QA > Update Tag
    dependsOn: Create_Commit_Report_QA
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "QA"

  # Apply to PROD              
  - stage: Apply_PROD
    displayName: PROD > Apply Terraform
    dependsOn: Update_GitHub_Tag_DEV
    condition: succeeded()
    jobs:
      - deployment: Apply_Alerting_Terraform
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(prod-azure-subscription)
                    
                - template: ../tasks/task_apply-alerting-terraform.yml
                  parameters:
                    targetBuild: PolarisAlertingBuild
                    targetTerraformArtifact: "alerting-terraform-files"
                    targetLabel: "PROD"
                    targetName: "Alerting Terraform CI Deployment"
                    targetPlanName: "prod"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(alerting-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    
  - stage: Deploy_PROD
    displayName: PROD > Deploy Apps
    dependsOn: Apply_PROD
    condition: succeeded()
    pool:
      name: $(prod-build-agent)
    jobs:
      - job: Deploy_Logic_Apps
        steps:
          - template: ../tasks/task_get-credentials.yml
            parameters:
              azureSubscriptionId: $(prod-azure-subscription)

          - template: ../tasks/task_deploy-alert-processor.yml
            parameters:
              targetBuild: PolarisAlertingBuild
              targetLabel: "PROD"
              targetName: "Alert Processor CI Deployment"
              targetSuffix: ""
              appInsightsKey: "$(innovation-prod-app-insights-instrumentation-key)"
              azureSubscription: $(prod-azure-subscription)
              azureSubscriptionId: $(subscriptionId)
              targetResourceGroup: rg-polaris-analytics

  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_PROD
    displayName: PROD > Save Report
    dependsOn: Deploy_PROD
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "PROD"
              targetLabelLower: "prod"

  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_PROD
    displayName: PROD > Update Tag
    dependsOn: Create_Commit_Report_PROD
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "PROD"
