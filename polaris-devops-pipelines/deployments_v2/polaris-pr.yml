---
trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - polaris-terraform/main-terraform/*
      - polaris-gateway/*
      - polaris-maintenance/*
      - polaris-pipeline/*
      - polaris-ui/*
      - polaris-e2e/*
        
variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: terraform-containers
  - name: buildConfiguration
    value: "Release"
  - name: terraformWorkingDir
    value: "$(System.DefaultWorkingDirectory)/polaris-terraform/main-terraform"
  - name: searchIndexTerraformWorkingDir
    value: "$(System.DefaultWorkingDirectory)/polaris-terraform/search-index-terraform"
    
stages:
  - stage: Wait_For_Running_PRs
    displayName: Wait for running PRs
    jobs:
      - job:
        pool:
          name: $(dev-build-agent)
        steps:
          - template: stages/jobs/tasks/task_wait-for-running-releases.yml
            parameters:
              devOpsPatToken: $(System.AccessToken)
      
  - stage: Determine_Changes
    displayName: Determine Changes
    dependsOn: Wait_For_Running_PRs
    jobs:
      - job: Generate_Diff
        pool:
          name: $(dev-build-agent)
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only origin/main)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/main-terraform/*')
                  {
                    echo "run main terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_MAIN_TERRAFORM;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/search-index-terraform/*')
                  {
                    echo "run search index terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_SEARCH_INDEX_TERRAFORM;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*' -Or $name -like 'polaris-pipeline/coordinator.tests/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*' -Or $name -like 'polaris-pipeline/pdf-generator.tests/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PDF_GENERATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-redactor/*' -Or $name -like 'polaris-pipeline/pdf-redactor.tests/*')
                  {
                    echo "run pdf redactor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PDF_REDACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*' -Or $name -like 'polaris-pipeline/text-extractor.tests/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_TEXT_EXTRACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*' -Or $name -like 'polaris-gateway.tests/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*' -Or $name -like 'polaris-pipeline/DdeiClient.tests/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_DDEI_CLIENT;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*' -Or $name -like 'polaris-pipeline/Common.tests/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COMMON;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PDF_GENERATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PDF_REDACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_TEXT_EXTRACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_DDEI_CLIENT;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo

  - stage: Validate_Polaris
    condition: succeeded()
    displayName: Validate Changes
    dependsOn: Determine_Changes
    variables:
      runTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_MAIN_TERRAFORM']]
      runSearchIndexTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_SEARCH_INDEX_TERRAFORM']]
      runNetworkingTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_NETWORKING_TERRAFORM']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PDF_GENERATOR']]
      runPdfRedactor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PDF_REDACTOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_TEXT_EXTRACTOR']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY']]
      runUI: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI']]
      runPipelineCommon: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COMMON']]
      runDDEIClient: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_DDEI_CLIENT']]
    jobs:
      - job: Validate_Main_Terraform
        condition: eq(variables.runTerraform, 'true')
        displayName: Validate Main Terraform
        pool:
          name: $(dev-build-agent)
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            displayName: Terraform > Install
            inputs:
              terraformVersion: latest
              
          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(terraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(main-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)

          # Validate
          - bash: terraform validate
            displayName: Terraform > Validate Config
            workingDirectory: $(terraformWorkingDir)

      - job: Check_Main_Plan
        pool:
          name: $(dev-build-agent)
        dependsOn: Validate_Main_Terraform
        condition: and(succeeded(), eq(variables.runTerraform, 'true'))
        displayName: Check Main Terraform
        steps:
          - template: stages/jobs/tasks/task_get-credentials.yml
            parameters:
              azureSubscription: $(dev-azure-subscription)
              
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            displayName: Terraform > Install
            inputs:
              terraformVersion: latest
              
          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(terraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(main-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)

          # Terraform Plan
          - bash: |
              terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
            displayName: "Terraform > Write Pipeline Plan"
            workingDirectory: $(terraformWorkingDir)
            env:
              ARM_CLIENT_ID: $(clientId)
              ARM_CLIENT_SECRET: $(clientSecret)
              ARM_TENANT_ID: $(tenantId)
              ARM_SUBSCRIPTION_ID: $(subscriptionId)
              TF_LOG: $(dev-log-level)
              
      - job: Validate_Search_Index_Terraform
        condition: eq(variables.runSearchIndexTerraform, 'true')
        displayName: Validate Search Index Terraform
        pool:
          name: $(dev-build-agent)
        steps:
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            displayName: Terraform > Install
            inputs:
              terraformVersion: latest

          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(searchIndexTerraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(index-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)

          # Validate
          - bash: terraform validate
            displayName: Terraform > Validate Config
            workingDirectory: $(searchIndexTerraformWorkingDir)

      - job: Check_Search_Index_Plan
        pool:
          name: $(dev-build-agent)
        dependsOn: Validate_Search_Index_Terraform
        condition: and(succeeded(), eq(variables.runSearchIndexTerraform, 'true'))
        displayName: Check Search Index Terraform
        steps:
          - template: stages/jobs/tasks/task_get-credentials.yml
            parameters:
              azureSubscription: $(dev-azure-subscription)

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            displayName: Terraform > Install
            inputs:
              terraformVersion: latest

          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(searchIndexTerraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(index-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)

          # Terraform Plan
          - bash: |
              terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
            displayName: "Terraform > Write Pipeline Plan"
            workingDirectory: $(searchIndexTerraformWorkingDir)
            env:
              ARM_CLIENT_ID: $(clientId)
              ARM_CLIENT_SECRET: $(clientSecret)
              ARM_TENANT_ID: $(tenantId)
              ARM_SUBSCRIPTION_ID: $(subscriptionId)
              TF_LOG: $(dev-log-level)

      - job: Validate_Gateway_Codebase
        condition: eq(variables.runGateway, 'true')
        displayName: Test - Gateway
        pool:
          name: $(dev-build-agent)
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Gateway"
        
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'echo $PATH'

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-gateway.tests/polaris-gateway.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Gateway tests"
            
          - publish: $(System.DefaultWorkingDirectory)/polaris-gateway.tests/coverage.cobertura.xml
            artifact: GatewayTestResults
            displayName: Publish Gateway Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result
                
      - job: Validate_Coordinator_Codebase
        condition: eq(variables.runCoordinator, 'true')
        displayName: Test - Coordinator
        pool:
          name: $(dev-build-agent)
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/coordinator/coordinator.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Coordinator"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/coordinator.tests/coordinator.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Coordinator tests"
            
          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/coordinator.tests/coverage.cobertura.xml
            artifact: CoordinatorTestResults
            displayName: Publish Coordinator Test Results

          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result
                
      - job: Validate_PDF_Generator_Codebase
        condition: eq(variables.runPdfGenerator, 'true')
        displayName: Test - PDF Generator
        pool:
          vmImage: windows-latest
        steps:
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: "Aspose.Total.NET.lic"
            displayName: "Download Aspose Licence"
      
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: "polaris-pipeline/pdf-generator"
            displayName: "Copy Aspose.Total.NET.lic to project folder before any builds occur"
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/pdf-generator/pdf-generator.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build PDF Generator"
      
          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/pdf-generator.tests/pdf-generator.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Pdf-Generator tests"
      
          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/pdf-generator.tests/coverage.cobertura.xml
            artifact: PdfGeneratorTestResults
            displayName: Publish Pdf-Generator Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result
                
      - job: Validate_PDF_Redactor_Codebase
        condition: eq(variables.runPdfRedactor, 'true')
        displayName: Test - PDF Redactor
        pool:
          vmImage: windows-latest
        steps:
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: "Aspose.Total.NET.lic"
            displayName: "Download Aspose Licence"
      
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: "polaris-pipeline/pdf-redactor"
            displayName: "Copy Aspose.Total.NET.lic to project folder before any builds occur"

          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/pdf-redactor/pdf-redactor.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build PDF Redactor"
      
          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/pdf-redactor.tests/pdf-redactor.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Pdf-Redactor tests"
      
          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/pdf-redactor.tests/coverage.cobertura.xml
            artifact: PdfRedactorTestResults
            displayName: Publish Pdf-Redactor Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result

      - job: Validate_Text_Extractor_Codebase
        condition: eq(variables.runTextExtractor, 'true')
        displayName: Test - Text Extractor
        pool:
          name: $(dev-build-agent)
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/text-extractor/text-extractor.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Text Extractor"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/text-extractor.tests/text-extractor.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Text-Extractor tests"

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/text-extractor.tests/coverage.cobertura.xml
            artifact: TextExtractorTestResults
            displayName: Publish Text-Extractor Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result
                
      - job: Validate_Pipeline_Common_Library
        condition: eq(variables.runPipelineCommon, 'true')
        displayName: Test - Pipeline Common Library
        pool:
          name: $(dev-build-agent)
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/Common/Common.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Common Library"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/Common.tests/Common.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Common Library tests"

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/Common.tests/coverage.cobertura.xml
            artifact: CommonLibraryTestResults
            displayName: Publish Common Library Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result
                
      - job: Validate_DDEI_Client_Library
        condition: eq(variables.runDDEIClient, 'true')
        displayName: Test - DDEI Client Library
        pool:
          name: $(dev-build-agent)
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/DdeiClient/DdeiClient.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build DDEI Client Library"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/DdeiClient.tests/DdeiClient.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run DDEI Client tests"

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/DdeiClient.tests/coverage.cobertura.xml
            artifact: DdeiClientLibraryTestResults
            displayName: Publish DDEI Client Library Test Results
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result

      - job: Validate_UI_Codebase
        condition: eq(variables.runUI, 'true')
        displayName: Test - UI
        pool:
          vmImage: ubuntu-latest
        steps:
          # Begin UI testing
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            inputs:
              contents: |
                polaris-ui/.env

          - task: Npm@1
            inputs:
              command: "ci"
              workingDir: "polaris-ui"
            displayName: "npm install"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run test:ci"
            displayName: "npm test"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run cy:ci"
            displayName: "cypress run tests"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build:development"
            displayName: "npm build"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run coverage"
            displayName: "combine unit and cypress coverage"

#           Commenting out this step as videos have been disabled to improve E2E performance under PR#1606
#          - task: PublishBuildArtifacts@1
#            condition: always()  # this step will always run, helpful to diagnose failing cypress tests
#            inputs:
#              PathtoPublish: "polaris-ui/cypress/videos"
#              ArtifactName: "Cypress failure vidoes"
#              publishLocation: "Container"
#            displayName: "Publish UI Cypress Failure Videos"
#
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/report"
              ArtifactName: "Unit test report"
              publishLocation: "Container"
            displayName: "Publish UI Unit Test Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/report-cypress"
              ArtifactName: "Cypress test report"
              publishLocation: "Container"
            displayName: "Publish UI Cypress Test Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage"
              ArtifactName: "Unit test coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Unit Test Coverage Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage-cypress"
              ArtifactName: "Cypress coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Cypress Coverage Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage-merged"
              ArtifactName: "Merged coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Merged Coverage Report"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "polaris-ui/report/*.xml"
              testRunTitle: "Unit tests"
            displayName: "Publish UI Unit Test XML"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "polaris-ui/report-cypress/test-*.xml"
              testRunTitle: "Cypress tests"
              mergeTestResults: true
            displayName: "Publish UI Unit Test Cypress Tests XML"

          - script: |
              cp $(System.DefaultWorkingDirectory)/polaris-ui/coverage-merged/cobertura-coverage.xml $(System.DefaultWorkingDirectory)/uiresults.cobertura.xml
            displayName: "Moving ui coverage results"

          - publish: $(System.DefaultWorkingDirectory)/uiresults.cobertura.xml
            artifact: UITestResults
            
          - bash: echo "##vso[task.setvariable variable=testsAvailable;isOutput=true]true"
            name: result

  - stage: Generate_Reports
    displayName: Collate and publish test results
    dependsOn: Validate_Polaris
    variables:
      gatewayTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_Gateway_Codebase.outputs['result.testsAvailable']]
      coordinatorTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_Coordinator_Codebase.outputs['result.testsAvailable']]
      pdfGeneratorTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_PDF_Generator_Codebase.outputs['result.testsAvailable']]
      pdfRedactorTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_PDF_Redactor_Codebase.outputs['result.testsAvailable']]
      textExtractorTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_Text_Extractor_Codebase.outputs['result.testsAvailable']]
      commonLibraryTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_Pipeline_Common_Library.outputs['result.testsAvailable']]
      ddeiClientTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_DDEI_Client_Library.outputs['result.testsAvailable']]
      uiTestsAvailable: $[stageDependencies.Validate_Polaris.Validate_UI_Codebase.outputs['result.testsAvailable']]
    jobs:
      - job:
        displayName: Test - UI
        condition: or(eq(variables.gatewayTestsAvailable, 'true'),eq(variables.coordinatorTestsAvailable, 'true'),eq(variables.pdfGeneratorTestsAvailable, 'true'),eq(variables.pdfRedactorTestsAvailable, 'true'),eq(variables.textExtractorTestsAvailable, 'true'),eq(variables.commonLibraryTestsAvailable, 'true'),eq(variables.ddeiClientTestsAvailable, 'true'),eq(variables.uiTestsAvailable, 'true'))
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NuGetAuthenticate@1
            displayName: 'Authenticate to NuGet Feed'

          - task: DotNetCoreCLI@2
            displayName: "Install ReportGenerator"
            inputs:
              command: custom
              custom: tool
              arguments: "install --global dotnet-reportgenerator-globaltool"

          - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
            displayName: "Update PATH"

          - download: current
            patterns: '**/*.cobertura.xml'
            displayName: Retrieve published test reports

          - script: |
              reportgenerator -reports:$(Pipeline.Workspace)/**/*.cobertura.xml -targetdir:$(Pipeline.Workspace)/CodeCoverage -reporttypes:Cobertura
            displayName: "Create code coverage report"

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage report"
            inputs:
              codeCoverageTool: "cobertura"
              summaryFileLocation: "$(Pipeline.Workspace)/CodeCoverage/Cobertura.xml"
