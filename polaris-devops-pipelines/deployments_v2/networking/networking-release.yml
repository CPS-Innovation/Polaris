---
trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisNetworkingBuild
      source: Polaris Networking - Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts
            
variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  - group: terraform-containers
    
pool:
  vmImage: ubuntu-latest

stages:
  - stage: Apply_DEV
    displayName: DEV > Apply Terraform
    jobs:
      - deployment: Fetch_Azure_Credentials
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(dev-azure-subscription)
              
      - deployment: Apply_Networking_Terraform
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        environment: "Dev"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_apply-networking-terraform.yml
                  parameters:
                    targetBuild: PolarisNetworkingBuild
                    targetTerraformArtifact: "networking-terraform-files"
                    targetLabel: "DEV"
                    targetName: "Networking Terraform CI Deployment"
                    targetPlanName: "dev"
                    terraformStorageAccount: $(dev-terraform-storage-account)
                    terraformContainerName: $(networking-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsdevstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)
                    
  # DEV: CHECK CURRENT STATUS RESPONSES FROM /API/STATUS ENDPOINTS FOLLOWING TERRAFORM CHANGES
  - stage: Check_DEV
    displayName: DEV > Build Checks
    dependsOn: Apply_DEV
    condition: succeeded()
    jobs:
      - job: Fetch_Azure_Credentials
        steps:
          - template: ../tasks/task_get-credentials.yml
            parameters:
              azureSubscriptionId: $(dev-azure-subscription)

      - job: Get_Status_URIs
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        displayName: Get Status URIs
        steps:
          - template: ../tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: "-dev"
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "coordinator"

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-generator"

      - job: Check_PDF_Redactor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfRedactorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "PDF Redactor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-redactor"

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "text-extractor"

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "polaris-gateway"

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "DEV"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "ui"
  
  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_DEV
    displayName: DEV > Save Report
    dependsOn: Check_Dev
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "DEV"
              targetLabelLower: "dev"

  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_DEV
    displayName: DEV > Update Tag
    dependsOn: Create_Commit_Report_DEV
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "DEV"

  # QA Apply to QA
  - stage: Apply_QA
    displayName: QA > Apply Terraform
    dependsOn: Update_GitHub_Tag_DEV
    jobs:
      - deployment: Fetch_Azure_Credentials
        environment: "QA"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(qa-azure-subscription)

      - deployment: Apply_Networking_Terraform
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        environment: "QA"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_apply-networking-terraform.yml
                  parameters:
                    targetBuild: PolarisNetworkingBuild
                    targetTerraformArtifact: "networking-terraform-files"
                    targetLabel: "QA"
                    targetName: "Networking Terraform CI Deployment"
                    targetPlanName: "qa"
                    terraformStorageAccount: $(qa-terraform-storage-account)
                    terraformContainerName: $(networking-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsqastorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

  # QA: CHECK CURRENT STATUS RESPONSES FROM /API/STATUS ENDPOINTS FOLLOWING TERRAFORM CHANGES
  - stage: Check_QA
    displayName: QA > Build Checks
    dependsOn: Apply_QA
    condition: succeeded()
    jobs:
      - job: Fetch_Azure_Credentials
        steps:
          - template: ../tasks/task_get-credentials.yml
            parameters:
              azureSubscriptionId: $(qa-azure-subscription)
    
      - job: Get_Status_URIs
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        displayName: Get Status URIs
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        steps:
          - template: ../tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: "-qa"
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "coordinator"

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-generator"

      - job: Check_PDF_Redactor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfRedactorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "PDF Redactor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-redactor"

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "text-extractor"

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "polaris-gateway"

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "QA"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "ui"

  # QA: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_QA
    displayName: QA > Save Report
    dependsOn: Check_QA
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "QA"
              targetLabelLower: "qa"

  # QA: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_QA
    displayName: QA > Update Tag
    dependsOn: Create_Commit_Report_QA
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "QA"

  # Apply to PROD              
  - stage: Apply_PROD
    displayName: PROD > Apply Terraform
    dependsOn: Update_GitHub_Tag_DEV
    condition: succeeded()
    jobs:
      - deployment: Fetch_Azure_Credentials
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_get-credentials.yml
                  parameters:
                    azureSubscriptionId: $(prod-azure-subscription)

      - deployment: Apply_Networking_Terraform
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        environment: "Prod"
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../tasks/task_apply-networking-terraform.yml
                  parameters:
                    targetBuild: PolarisNetworkingBuild
                    targetTerraformArtifact: "networking-terraform-files"
                    targetLabel: "PROD"
                    targetName: "Networking Terraform CI Deployment"
                    targetPlanName: "prod"
                    terraformStorageAccount: $(prod-terraform-storage-account)
                    terraformContainerName: $(networking-terraform-container-name)
                    terraformStateKey: $(terraform-key)
                    terraformStateAccessKey: $(cpsprodstorageterraform-key1)
                    armClientId: $(clientId)
                    armClientSecret: $(clientSecret)
                    armTenantId: $(tenantId)
                    armSubscriptionId: $(subscriptionId)

  # DEV: CHECK CURRENT STATUS RESPONSES FROM /API/STATUS ENDPOINTS FOLLOWING TERRAFORM CHANGES
  - stage: Check_PROD
    displayName: PROD > Build Checks
    dependsOn: Apply_PROD
    condition: succeeded()
    pool:
      name: $(prod-build-agent)
    jobs:
      - job: Fetch_Azure_Credentials
        steps:
          - template: ../tasks/task_get-credentials.yml
            parameters:
              azureSubscriptionId: $(prod-azure-subscription)

      - job: Get_Status_URIs
        dependsOn: Fetch_Azure_Credentials
        condition: succeeded()
        displayName: Get Status URIs
        variables:
          clientId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_ID']]
          clientSecret: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.CLIENT_SECRET']]
          tenantId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.TENANT_ID']]
          subscriptionId: $[dependencies.Fetch_Azure_Credentials.outputs['credentials.SUBSCRIPTION_ID']]
        steps:
          - template: ../tasks/task_get-status-uris.yml
            parameters:
              targetSuffix: ""
              armClientId: $(clientId)
              armClientSecret: $(clientSecret)
              armTenantId: $(tenantId)
              armSubscriptionId: $(subscriptionId)

      - job: Check_Coordinator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.coordinatorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "Coordinator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "coordinator"

      - job: Check_PDF_Generator
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfGeneratorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "PDF Generator"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-generator"

      - job: Check_PDF_Redactor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.pdfRedactorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "PDF Redactor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "pdf-redactor"

      - job: Check_Text_Extractor
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.textExtractorUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "Text Extractor"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "text-extractor"

      - job: Check_Gateway
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.gatewayUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "Gateway"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/api/status"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "polaris-gateway"

      - job: Check_Proxy
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.proxyUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "Proxy"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "Polaris Proxy is online"

      - job: Check_SPA
        dependsOn: Get_Status_URIs
        condition: succeeded()
        variables:
          uri: $[dependencies.Get_Status_URIs.outputs['uris.spaUri']]
        steps:
          - template: ../tasks/task_call-status-endpoint.yml
            parameters:
              targetBuild: PolarisNetworkingBuild
              targetLabel: "PROD"
              targetAppName: "UI"
              targetScript: "InvokeRequestWithRetryNonNumeric.ps1"
              endpointUri: "$(uri)/polaris-ui/build-version.txt"
              statusCheckMethod: $(status-check-method)
              statusCheckRetries: $(status-check-retries)
              statusCheckDelaySeconds: $(status-check-delay-seconds)
              statusCheckTimeoutSeconds: $(status-check-timeout-seconds)
              successTextContent: "ui"

  # DEV: SAVE COMMIT REPORTS TO THE PIPELINE REPO          
  - stage: Create_Commit_Report_PROD
    displayName: PROD > Save Report
    dependsOn: Check_PROD
    condition: succeeded()
    jobs:
      - job: Create_Commit_Report
        steps:
          - template: ../tasks/task_create-commit-report.yml
            parameters:
              targetLabel: "PROD"
              targetLabelLower: "prod"

  # DEV: MOVE THE GITHUB TAG TO THE TIP OF MAIN          
  - stage: Update_GitHub_Tag_PROD
    displayName: PROD > Update Tag
    dependsOn: Create_Commit_Report_PROD
    condition: succeeded()
    jobs:
      - job: Update_Github_Tag
        steps:
          - template: ../tasks/task_update-github-tag.yml
            parameters:
              targetLabel: "PROD"
