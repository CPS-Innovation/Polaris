---
trigger: none
pr: none
  
pool:
  name: $(uat-build-agent)
  
variables:
  - group: kv-uat-terraform
  - group: polaris-global
  - group: terraform-containers
  - name: target-env
    value: "UAT"
  
stages:
  - stage: Reset_Environment
    displayName: "Reset Environment"
    jobs:
      - deployment: Wait_For_Running_Pipelines
        environment: $(target-env)
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../stages/jobs/tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)
                    
      - deployment: Reset_Casework_App_Index
        condition: succeeded()
        dependsOn: Wait_For_Running_Pipelines
        displayName: "Reset: Casework App Index"
        environment: $(target-env)
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: latest
                    
                - template: ../stages/jobs/tasks/task_get-credentials.yml
                  parameters:
                    azureSubscription: $(uat-azure-subscription)
                    
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/s/polaris-terraform/search-index-terraform
                  env:
                    TF_STATE_ACCOUNT_NAME: $(uat-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(index-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsuatstorageterraform-key1)
                    TF_LOG: "ERROR"
                    
                # Terraform Apply
                - bash: |
                    terraform apply -destroy -auto-approve
                  displayName: Terraform > Destroy
                  workingDirectory: $(Pipeline.Workspace)/s/polaris-terraform/search-index-terraform
                  env:
                    ARM_CLIENT_ID: $(clientId)
                    ARM_CLIENT_SECRET: $(clientSecret)
                    ARM_TENANT_ID: $(tenantId)
                    ARM_SUBSCRIPTION_ID: $(subscriptionId)
                    TF_LOG: "ERROR"