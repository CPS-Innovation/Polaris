---
trigger: none
pr: none

pool:
  name: $(uat-build-agent)
  
variables:
  - group: kv-uat-terraform
  - group: polaris-global
  - group: terraform-containers
  - name: target-env
    value: "UAT"
  
stages:
  - stage: Wait_For_Running_Pipelines
    displayName: Check Run Status
    jobs:
      - deployment: Wait_For_Running_Pipelines
        environment: $(target-env)
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../deployments_v2/stages/jobs/tasks/task_wait-for-running-releases.yml
                  parameters:
                    devOpsPatToken: $(System.AccessToken)
                    
  - stage: Reset_Polaris_Index
    displayName: Reset Polaris Index
    dependsOn: Wait_For_Running_Pipelines
    jobs:
      - job:
        steps:
          - checkout: self
          - checkout: git://Information Management/PolarisDDEI
          - checkout: git://Innovation Delivery/redaction-logger
            
          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
            displayName: Terraform > Install
            inputs:
              terraformVersion: latest
                      
          - template: ../deployments_v2/stages/jobs/tasks/task_get-credentials.yml
            parameters:
              azureSubscription: $(uat-azure-subscription)
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(index-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: Polaris/polaris-terraform/search-index-terraform
              targetArea: Search Index
              targetVarFile: uat

          - bash: |
              if [ $(az group exists --name "rg-polaris$targetSuffix") = true ]; then
                az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId
                az account set --subscription $subscriptionId
                az keyvault delete --name "kv-polaris$targetSuffix" --resource-group "rg-polaris$targetSuffix"
                az storage account delete -name $uiStorageAccount --resource-group "rg-polaris$targetSuffix"
                az storage account delete -name $pipelineStorageAccount --resource-group "rg-polaris-pipeline$targetSuffix"
              fi
            displayName: Run Script
            env:
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              targetSuffix: "-uat"
              uiStorageAccount: "sacpsuatpolaris"
              pipelineStorageAcocunt: "sacpsuatpolarispipeline"
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(main-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: Polaris/polaris-terraform/main-terraform
              targetArea: Casework App
              targetVarFile: uat
              
          - bash: |
              az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId
              az account set --subscription $subscriptionId
              az keyvault purge --name "kv-redaction-logger-$(targetSuffix)"
            displayName: Run Script
            env:
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              targetSuffix: uat
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(redaction-logger-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: redaction-logger/terraform-redaction-logger
              targetArea: Redaction Logger
              targetVarFile: uat
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(ddei-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: PolarisDDEI/terraform
              targetArea: Polaris DDEI
              targetVarFile: uat
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(alerting-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: Polaris/polaris-terraform/alerting-terraform
              targetArea: Alerting Framework
              targetVarFile: uat
              
          - template: task_reset.yml
            parameters:
              terraformStorageAccount: $(uat-terraform-storage-account)
              terraformContainerName: $(networking-terraform-container-name)
              terraformStateKey: $(terraform-key)
              terraformStateAccessKey: $(cpsuatstorageterraform-key1)
              clientId: $(clientId)
              clientSecret: $(clientSecret)
              tenantId: $(tenantId)
              subscriptionId: $(subscriptionId)
              workingDirectory: Polaris/polaris-terraform/networking-terraform
              targetArea: Networking Components
              targetVarFile: uat
