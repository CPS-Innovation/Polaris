# Pull Request Azure DevOps pipeline for the Networking and Networking-Events Terraform files

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - polaris-terraform/networking-terraform/*

variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: networking-terraform
  - group: polaris-vpn
  - name: networkingTerraformWorkingDir
    value: "$(System.DefaultWorkingDirectory)/polaris-terraform/networking-terraform"
  - name: templatesWorkingDir
    value: "$(System.DefaultWorkingDirectory)/polaris-devops-pipelines/templates"
  
stages:
  - stage: Validate_Networking_Terraform
    displayName: Validate Net Terraform
    jobs:
      - job: Validate
        pool:
          vmImage: ubuntu-latest
        steps:
          # Install Terraform based on version variable
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Terraform > Install
            inputs:
              terraformVersion: $(terraform-version)
          
          # Install Checkov
          - bash: pip3 install checkov
            displayName: Checkov > Install
          
          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(networkingTerraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)
          
          # Validate
          - bash: terraform validate
            displayName: Terraform > Validate Config
            workingDirectory: $(networkingTerraformWorkingDir)
          
          # Verify main files with Checkov
          - bash: checkov --directory $(networkingTerraformWorkingDir) --skip-check $(checkov-rules-to-skip) -o junitxml > $(networkingTerraformWorkingDir)/Networking-Checkov-Report.xml
            displayName: Checkov > Verify Networking Terraform
          
          # Publish test results for root module
          - task: PublishTestResults@2
            displayName: Checkov > Publish Networking Test Results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-Checkov-Report.xml'
              searchFolder: $(networkingTerraformWorkingDir)
              mergeTestResults: true
              testRunTitle: Checkov Scan
              failTaskOnFailedTests: false
              publishRunAttachments: true

      - job: CheckPlan
        dependsOn: Validate
        pool:
          vmImage: ubuntu-latest
        steps:
          #create vpn tunnel
          - bash: |
              sudo apt-get --assume-yes --no-install-recommends install openvpn

              chmod 777 vpnconfig.ovpn
              envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

              sudo openvpn _vpnconfig.ovpn &

              sleep 5

              ifconfig tun0

              sudo rm /etc/resolv.conf
              echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
            workingDirectory: $(templatesWorkingDir)
            env:
              PRESHAREDKEY: $(dev_pre-shared_key)
              PRIVATEKEY: $(dev_private_key)
              CLIENTCERTIFICATE: $(dev_client_cert)
              VPNSERVER: $(dev_vpn_server)
              DNSSERVER: $(dev_dns_server)
            displayName: Creating DEV VPN tunnel
            
          # Install Terraform based on version variable
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Terraform > Install
            inputs:
              terraformVersion: $(terraform-version)
          
          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: $(networkingTerraformWorkingDir)
            env:
              TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
              TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
              TF_STATE_KEY: $(terraform-key)
              TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
              TF_LOG: $(dev-log-level)
          
          # Terraform Plan
          - bash: |
              terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
            displayName: 'Terraform > Write Networking Plan'
            workingDirectory: $(networkingTerraformWorkingDir)
            env:
              ARM_CLIENT_ID: $(innovation-development-spn-client-id)
              ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
              ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
              ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
              TF_LOG: $(dev-log-level)