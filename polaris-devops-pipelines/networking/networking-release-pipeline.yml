# Unified Build and Release Azure DevOps networking for the Networking and Networking-Events Terraform

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: NetworkingBuild
      source: Polaris Networking - Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: networking-terraform
  
stages:
  - stage: Apply_DEV
    displayName: DEV Deployment
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: Networking_Terraform_Deployment
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: NetworkingBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'
                  
                #download networking terraform build artifact
                - download: NetworkingBuild
                  displayName: Terraform > Download Networking terraform build
                  artifact: "networking-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write Networking Plan'
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
  - stage: Apply_QA
    displayName: QA Deployment
    pool:
      name: $(qa-build-agent)
    jobs:
      - deployment: Networking_Terraform_Deployment
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: NetworkingBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'
                  
                #download networking terraform build artifact
                - download: NetworkingBuild
                  displayName: Terraform > Download Networking terraform build
                  artifact: "networking-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Networking Plan'
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)

  - stage: Apply_PROD
    displayName: PROD Deployment
    pool:
      name: $(prod-build-agent)
    jobs:
      - deployment: Networking_Terraform_Deployment
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: NetworkingBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'
                  
                #download networking terraform build artifact
                - download: NetworkingBuild
                  displayName: Terraform > Download Networking terraform build
                  artifact: "networking-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(networking-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Networking Plan'
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  workingDirectory: $(Pipeline.Workspace)/NetworkingBuild/networking-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)