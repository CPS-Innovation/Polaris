# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris - Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: pipeline-terraform
  - group: ui-terraform
  - group: polaris-status-check-endpoints

stages:
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only --relative --diff-filter AMRD dev HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"
                
                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_DEV;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                }
                
                $files = $(git diff --name-only --relative --diff-filter AMRD dev HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_QA;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                }
                
                $files = $(git diff --name-only --relative --diff-filter AMRD dev HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_PROD;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo

  - stage: Apply_DEV
    displayName: Deployment > DEV
    condition: succeeded()
    dependsOn: Determine_Changes
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_DEV']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_DEV']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_DEV']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_DEV']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_DEV']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_DEV']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_DEV']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_DEV']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_DEV']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_DEV']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: CI_Deploy_Polaris
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files-dev"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init Main Pipeline
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-dev
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write Pipeline Plan
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply Main Pipeline
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-dev-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-dev-drop
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-dev-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-dev-drop
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-dev-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-dev-drop
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files-dev"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init Pipeline Events
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-dev
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write Pipeline Events Plan
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply Pipeline Events
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files-dev"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init UI Terraform
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-dev
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write UI Plan
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply UI Terraform
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-dev-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy SPA App Service to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-dev"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-dev-drop
                                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-dev-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-dev-drop
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-dev-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-dev-drop
                
                # Restart app service - moved away from deployment to buy some time    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart SPA Azure App Service'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-dev"
                    
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files-dev"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init UI Events
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-dev
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: Terraform > Write UI Events Plan
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply UI Events
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-dev
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
  - stage: Check_DEV
    displayName: Status Checks > DEV
    dependsOn:
      - Determine_Changes
      - Apply_DEV
    condition: succeeded()
    variables:
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_DEV']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_DEV']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_DEV']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_DEV']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_DEV']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_DEV']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_DEV']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Run_Status_Checks
        steps:
          #download scripts artifact
          - download: PolarisBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Coordinator status'
            condition: eq(variables.runCoordinator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV PDF-Generator status'
            condition: eq(variables.runPdfGenerator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Text-Extractor status'
            condition: eq(variables.runTextExtractor, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Auth-Handover status'
            condition: eq(variables.runAuthHandover, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Gateway status'
            condition: eq(variables.runGateway, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Proxy status'
            condition: eq(variables.runUITerraform, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV UI status'
            condition: eq(variables.runUICodebase, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

  - stage: Update_DEV_Tag
    displayName: Update Tag > DEV
    dependsOn: Check_DEV
    condition: succeeded()
    jobs:
      - job: Update_DEV_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log dev...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-dev.csv
            displayName: Generate commit report for DEV

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-dev.csv"
              artifact: "Commit Report - DEV"
            displayName: "Publish Commit report for DEV"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/dev
                git tag -f dev
                git tag -f $(resources.pipeline.PolarisBuild.runName)
                git push origin --tags
            displayName: Updating the dev tag        
                    
  - stage: Run_e2e_Tests_DEV
    displayName: Run e2e tests > DEV
    dependsOn: 
      - Determine_Changes
      - Apply_DEV
      - Check_DEV
      - Update_DEV_Tag
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_DEV']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_DEV']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_DEV']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_DEV']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_DEV']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_DEV']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_DEV']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_DEV']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_DEV']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_DEV']]
    jobs:
      - job: Run_e2e_Tests_DEV
        pool:
          vmImage: windows-latest
        steps:
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests: DEV'
            condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'),eq(variables.runCoordinator, 'true'),eq(variables.runPdfGenerator, 'true'),eq(variables.runTextExtractor, 'true'),eq(variables.runGateway, 'true'),eq(variables.runAuthHandover, 'true'),eq(variables.runUICodebase, 'true'))
            inputs:
              buildDefinition: 129
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)

  - stage: Apply_QA
    displayName: Deployment > QA
    dependsOn:
      - Determine_Changes
      - Update_DEV_Tag
      - Run_e2e_Tests_DEV
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_QA']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_QA']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_QA']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_QA']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_QA']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_QA']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_QA']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_QA']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_QA']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_QA']]
    pool:
      name: $(qa-build-agent)
    jobs:
      - deployment: CI_Deploy_Polaris
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files-qa"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-qa
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                    
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-qa-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-qa-drop
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-qa-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-qa-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-qa-drop
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-qa-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-qa-drop
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files-qa"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-qa
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files-qa"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-qa
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                    
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-qa-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy UI App Service to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-qa"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-qa-drop
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-qa-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-qa-drop
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-qa-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-qa-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-qa"
                        
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files-qa"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-qa
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-qa
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                    
  - stage: Check_QA
    displayName: Status Checks > QA
    dependsOn:
      - Determine_Changes
      - Apply_QA
    condition: succeeded()
    variables:
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_QA']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_QA']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_QA']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_QA']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_QA']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_QA']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_QA']]
    pool:
      name: $(qa-build-agent)
    jobs:
      - job: Run_Status_Checks
        steps:
          #download scripts artifact
          - download: PolarisBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Coordinator status'
            condition: eq(variables.runCoordinator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA PDF-Generator status'
            condition: eq(variables.runPdfGenerator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Text-Extractor status'
            condition: eq(variables.runTextExtractor, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Auth-Handover status'
            condition: eq(variables.runAuthHandover, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Gateway status'
            condition: eq(variables.runGateway, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Proxy status'
            condition: eq(variables.runUITerraform, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA UI status'
            condition: eq(variables.runUICodebase, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Update_QA_Tag
    displayName: Update Tag > QA
    dependsOn: Check_QA
    condition: succeeded()
    jobs:
      - job: Update_QA_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log qa...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-qa.csv
            displayName: Generate commit report for QA

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-qa.csv"
              artifact: "Commit Report - QA"
            displayName: "Publish Commit report for QA"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/qa
                git tag -f qa
                git tag -f $(resources.pipeline.PolarisBuild.runName)
                git push origin --tags 
            displayName: Updating the qa tag
            
  - stage: Run_e2e_Tests_QA
    displayName: Run e2e tests > QA
    dependsOn:
      - Determine_Changes
      - Apply_QA
      - Check_QA
      - Update_QA_Tag
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_QA']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_QA']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_QA']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_QA']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_QA']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_QA']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_QA']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_QA']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_QA']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_QA']]
    jobs:
      - job: Run_e2e_Tests_QA
        pool:
          vmImage: windows-latest
        steps:
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests: QA'
            condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'),eq(variables.runCoordinator, 'true'),eq(variables.runPdfGenerator, 'true'),eq(variables.runTextExtractor, 'true'),eq(variables.runGateway, 'true'),eq(variables.runAuthHandover, 'true'),eq(variables.runUICodebase, 'true'))
            inputs:
              buildDefinition: 210
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)

  - stage: Apply_PROD
    displayName: PROD Deployment
    dependsOn:
      - Determine_Changes
      - Update_DEV_Tag
      - Run_e2e_Tests_DEV
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_PROD']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_PROD']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_PROD']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_PROD']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_PROD']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_PROD']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_PROD']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_PROD']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_PROD']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_PROD']]
    pool:
      name: $(prod-build-agent)
    jobs:
      - deployment: CI_Deploy_Polaris
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files-prod"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-prod
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-prod-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-prod-drop
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-prod-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-prod-drop
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-prod-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-prod-drop
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files-prod"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-prod
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files-prod"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-prod
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-prod-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy UI App Service to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-prod-drop
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-prod-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-prod-drop
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-prod-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-prod-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris"
                    
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files-prod"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-prod
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files-prod
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
  - stage: Check_PROD
    displayName: Status Checks > PROD
    dependsOn:
      - Determine_Changes
      - Apply_PROD
    condition: succeeded()
    variables:
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_PROD']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_PROD']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_PROD']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_PROD']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_PROD']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_PROD']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_PROD']]
    pool:
      name: $(prod-build-agent)
    jobs:
      - job: Run_Status_Checks
        steps:
          #download scripts artifact
          - download: PolarisBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Coordinator status'
            condition: eq(variables.runCoordinator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD PDF-Generator status'
            condition: eq(variables.runPdfGenerator, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Text-Extractor status'
            condition: eq(variables.runTextExtractor, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Auth-Handover status'
            condition: eq(variables.runAuthHandover, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Gateway status'
            condition: eq(variables.runGateway, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Proxy status'
            condition: eq(variables.runUITerraform, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD UI status'
            condition: eq(variables.runUICodebase, 'true')
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Update_PROD_Tag
    displayName: Update Tag > PROD
    dependsOn: Check_PROD
    condition: succeeded()
    jobs:
      - job: Update_PROD_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log prod...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-prod.csv
            displayName: Generate commit report for PROD

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-prod.csv"
              artifact: "Commit Report - PROD"
            displayName: "Publish Commit report for PROD"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/prod
                git tag -f prod
                git tag -f $(resources.pipeline.PolarisBuild.runName)
                git push origin --tags 
            displayName: Updating the prod tag