# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisBuild
      source: Polaris - Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: pipeline-terraform
  - group: ui-terraform

stages:
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only --relative --diff-filter AMR HEAD^ HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"
                
                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo

  - stage: Apply_DEV
    displayName: DEV Deployment
    condition: succeeded()
    dependsOn: Determine_Changes
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: Deploy_DEV
        condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'),eq(variables.runCoordinator, 'true'),eq(variables.runPdfGenerator, 'true'),eq(variables.runTextExtractor, 'true'),eq(variables.runGateway, 'true'),eq(variables.runAuthHandover, 'true'),eq(variables.runUICodebase, 'true'))
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop/a/coordinator
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop/a/pdf-generator
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop/a/text-extractor
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop/a/polaris-gateway
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-drop/a/polaris-auth-handover
                
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy SPA App Service to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-dev"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart SPA Azure App Service'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-dev"
                    
  - stage: Run_e2e_Tests
    displayName: Run e2e Tests
    dependsOn:
      - Determine_Changes
      - Apply_DEV
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE']]
    jobs:
      - job: Run_e2e_Tests
        pool:
          vmImage: windows-latest
        steps:
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests'
            condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'),eq(variables.runCoordinator, 'true'),eq(variables.runPdfGenerator, 'true'),eq(variables.runTextExtractor, 'true'),eq(variables.runGateway, 'true'),eq(variables.runAuthHandover, 'true'),eq(variables.runUICodebase, 'true'))
            inputs:
              buildDefinition: 129
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)

  - stage: Apply_QA
    displayName: QA Deployment
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE']]
    pool:
      name: $(qa-build-agent)
    jobs:
      - deployment: Deploy_QA
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop/a/coordinator
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-qa-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop/a/pdf-generator
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop/a/text-extractor
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop/a/polaris-gateway
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-drop/a/polaris-auth-handover
                
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy UI App Service to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-qa"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-qa"

  - stage: Apply_PROD
    displayName: PROD Deployment
    dependsOn:
      - Determine_Changes
      - Run_e2e_Tests
    condition: succeeded()
    variables:
      runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM']]
      runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM']]
      runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM']]
      runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM']]
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR']]
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER']]
      runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE']]
    pool:
      name: $(prod-build-agent)
    jobs:
      - deployment: Deploy_PROD
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  condition: or(eq(variables.runPipelineTerraform, 'true'),eq(variables.runPipelineEventsTerraform, 'true'),eq(variables.runUITerraform, 'true'),eq(variables.runUIEventsTerraform, 'true'))
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineTerraform, 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runPipelineTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runPipelineEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUITerraform, 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runUITerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  condition: eq(variables.runUIEventsTerraform, 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runCoordinator, 'true')
                  displayName: 'Deploy Coordinator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop/a/coordinator
                
                #download pdf-generator build artifact
                - download: PolarisBuild
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runPdfGenerator, 'true')
                  displayName: 'Deploy PDF Generator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop/a/pdf-generator
                
                #download text-extractor build artifact
                - download: PolarisBuild
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runTextExtractor, 'true')
                  displayName: 'Deploy Text Extractor Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop/a/text-extractor
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runGateway, 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runGateway, 'true')
                  displayName: 'Deploy Gateway Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop/a/polaris-gateway
                
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(variables.runAuthHandover, 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-drop/a/polaris-auth-handover
                
                #download UI build artifact
                - download: PolarisBuild
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Deploy UI App Service to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  condition: eq(variables.runUICodebase, 'true')
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris"