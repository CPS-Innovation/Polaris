# Build and Publish Artifact Azure DevOps pipeline for Polaris Terraform and Codebase

name: '$(majorMinorVersion).$(Year:yy)$(DayOfYear).$(semanticVersion)-man'

trigger: none
pr: none
  
variables:
  buildConfiguration: "Release"
  majorMinorVersion: 1.0
  semanticVersion: $[counter(variables['majorMinorVersion'], 1)]
    
stages:
  - stage: Publish_Artifacts
    displayName: Publish artifacts
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-terraform/"
              artifact: "pipeline-terraform-files"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline events terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-events-terraform/"
              artifact: "pipeline-events-terraform-files"
              publishLocation: "pipeline"
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI terraform artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-terraform/ui-terraform/'
              artifact: 'ui-terraform-files'
              publishLocation: 'pipeline'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI events terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/ui-events-terraform/"
              artifact: "ui-events-terraform-files"
              publishLocation: "pipeline"
  
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/coordinator/coordinator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)"
              zipAfterPublish: false
            displayName: "Create Coordinator package to publish"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/coordinator"
              artifact: "polaris-coordinator-drop"
            displayName: "Publish Coordinator codebase artifact"
            
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: 'Aspose.Total.NET.lic'
            displayName: 'Download Aspose Licence'

          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: 'polaris-pipeline/pdf-generator'
            displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/pdf-generator/pdf-generator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)"
              zipAfterPublish: false
            displayName: "Create PDF-Generator package to publish"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/pdf-generator"
              artifact: "polaris-pdf-generator-drop"
            displayName: "Publish PDF-Generator codebase artifact"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/text-extractor/text-extractor.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)"
              zipAfterPublish: false
            displayName: "Create Text-Extractor package to publish"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/text-extractor"
              artifact: "polaris-text-extractor-drop"
            displayName: "Publish Text-Extractor codebase artifact"

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-auth-handover/polaris-auth-handover.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)"
              zipAfterPublish: false
            displayName: "Create Auth Handover package to publish"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-auth-handover"
              artifact: "polaris-auth-handover-drop"
            displayName: "Publish Auth Handover codebase artifact"
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)"
              zipAfterPublish: false
            displayName: "Create Gateway package to publish"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-gateway"
              artifact: "polaris-gateway-drop"
            displayName: "Publish Gateway codebase artifact"
            
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            inputs:
              contents: |
                polaris-ui/.env

          - task: Npm@1
            inputs:
              command: "install"
              workingDir: "polaris-ui"
            displayName: "npm install"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build"
            displayName: "npm build"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/build"
              ArtifactName: "polaris-ui-drop"
              publishLocation: "Container"
            displayName: Publish UI artifact
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline scripts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-devops-pipelines/scripts'
              artifact: 'polaris-script-files'
              publishLocation: 'pipeline'