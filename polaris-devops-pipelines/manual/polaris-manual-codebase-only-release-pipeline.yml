# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisManualCodebaseOnlyBuild
      source: Polaris - Manual Codebase-Only Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: pipeline-terraform
  - group: ui-terraform
  - group: polaris-status-check-endpoints

stages:
  - stage: Apply_DEV
    displayName: Deployment > DEV
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: Manual_Deploy_Polaris_Codebase
        environment: "DEV"
        strategy:
          runOnce:
            deploy:
              steps:
                #download coordinator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-coordinator-drop
                
                #download pdf-generator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-pdf-generator-drop
                
                #download text-extractor build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-text-extractor-drop
                    
                #download UI build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-dev"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-ui-drop
                
                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-gateway-drop
                
                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-auth-handover-drop
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-dev"
                    
  - stage: Check_DEV
    displayName: Status Check > DEV
    dependsOn:
      - Apply_DEV
    pool:
      name: $(dev-build-agent)
    jobs:
      - job:
        steps:
          #download scripts artifact
          - download: PolarisManualCodebaseOnlyBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Update_DEV_Tag
    displayName: Update Tag > DEV
    dependsOn: Check_DEV
    jobs:
      - job: Update_DEV_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log dev...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-dev.csv
            displayName: Generate commit report for DEV

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-dev.csv"
              artifact: "Commit Report - DEV"
            displayName: "Publish Commit report for DEV"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"

                git push origin :refs/tags/dev
                git tag -f dev
                git tag -f $(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)
                git push origin --tags 
            displayName: Updating the dev tag
            
  - stage: Run_e2e_Tests_DEV
    displayName: Run e2e tests > DEV
    dependsOn:
      - Apply_DEV
      - Check_DEV
      - Update_DEV_Tag
    condition: succeeded()
    jobs:
      - job: Run_e2e_Tests_DEV
        pool:
          vmImage: windows-latest
        steps:
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests: DEV'
            inputs:
              buildDefinition: 129
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)
          
  - stage: Apply_QA
    displayName: Deployment > QA
    dependsOn:
      - Update_DEV_Tag
      - Run_e2e_Tests_DEV
    pool:
      name: $(qa-build-agent)
    jobs:
      - deployment: Manual_Deploy_Polaris_Codebase
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                #download coordinator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-coordinator-drop

                #download pdf-generator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-qa-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-pdf-generator-drop

                #download text-extractor build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-text-extractor-drop
                    
                #download UI build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                    
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-qa"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-ui-drop

                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-gateway-drop

                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-auth-handover-drop

                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-qa"
  
  - stage: Check_QA
    displayName: Status Check > QA
    dependsOn:
      - Apply_QA
    pool:
      name: $(qa-build-agent)
    jobs:
      - job:
        steps:
          #download scripts artifact
          - download: PolarisManualCodebaseOnlyBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Update_QA_Tag
    displayName: Update Tag > QA
    dependsOn: Check_QA
    jobs:
      - job: Update_QA_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log qa...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-qa.csv
            displayName: Generate commit report for QA

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-qa.csv"
              artifact: "Commit Report - QA"
            displayName: "Publish Commit report for QA"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/qa
                git tag -f qa
                git tag -f $(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)
                git push origin --tags 
            displayName: Updating the qa tag
            
  - stage: Run_e2e_Tests_QA
    displayName: Run e2e tests > QA
    dependsOn:
      - Apply_QA
      - Check_QA
      - Update_QA_Tag
    condition: succeeded()
    jobs:
      - job: Run_e2e_Tests_QA
        pool:
          vmImage: windows-latest
        steps:
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests: QA'
            inputs:
              buildDefinition: 210
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)
          
  - stage: Apply_PROD
    displayName: Deployment > PROD
    dependsOn:
      - Update_DEV_Tag
      - Run_e2e_Tests_DEV
    pool:
      name: $(prod-build-agent)
    jobs:
      - deployment: Manual_Deploy_Polaris_Codebase
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                #download coordinator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-coordinator-drop

                #download pdf-generator build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-pdf-generator-drop

                #download text-extractor build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-text-extractor-drop
                    
                #download UI build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-ui-drop

                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-gateway-drop

                #download gateway build artifact
                - download: PolarisManualCodebaseOnlyBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-auth-handover-drop

                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris"
                    
  - stage: Check_PROD
    displayName: Status Check > PROD
    dependsOn:
      - Apply_PROD
    pool:
      name: $(prod-build-agent)
    jobs:
      - job:
        steps:
          #download scripts artifact
          - download: PolarisManualCodebaseOnlyBuild
            displayName: Polaris Build > Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualCodebaseOnlyBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Update_PROD_Tag
    displayName: Update Tag > PROD
    dependsOn: Check_PROD
    jobs:
      - job: Update_PROD_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log prod...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-prod.csv
            displayName: Generate commit report for PROD

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-prod.csv"
              artifact: "Commit Report - PROD"
            displayName: "Publish Commit report for PROD"

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/prod
                git tag -f prod
                git tag -f $(resources.pipeline.PolarisManualCodebaseOnlyBuild.runName)
                git push origin --tags 
            displayName: Updating the prod tag