# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: TempManualBuild
      source: Temp - Manual App Insights Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: polaris-vpn

stages:
  - stage: Apply_DEV
    displayName: Deployment > DEV
    pool:
      vmImage: ubuntu-latest
    jobs:
      - deployment: Manual_Deploy_Polaris_Codebase
        environment: "DEV"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: TempManualBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'
                  
                #download scripts artifact
                - download: TempManualBuild
                  displayName: Download Scripts
                  artifact: 'polaris-script-files'
                  condition: succeeded()

                #create vpn tunnel
                - bash: |
                    sudo apt-get --assume-yes --no-install-recommends install openvpn

                    chmod 777 vpnconfig.ovpn
                    envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

                    sudo openvpn _vpnconfig.ovpn &

                    sleep 5

                    ifconfig tun0

                    sudo rm /etc/resolv.conf
                    echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
                  workingDirectory: $(Pipeline.Workspace)/TempManualBuild/polaris-template-files
                  env:
                    PRESHAREDKEY: $(dev_pre-shared_key)
                    PRIVATEKEY: $(dev_private_key)
                    CLIENTCERTIFICATE: $(dev_client_cert)
                    VPNSERVER: $(dev_vpn_server)
                    DNSSERVER: $(dev_dns_server)
                  displayName: Creating DEV VPN tunnel
                  condition: succeeded()
                  
                #install nuget
                - bash: |
                    sudo yum install -y mono-complete
                    sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
                    sudo chmod +x /usr/local/bin/nuget
                    nuget install Microsoft.ApplicationInsights
                  displayName: Installing Application Insights
                  condition: succeeded()
                
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Record Start'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TempManualBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TempManualBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TempManualBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TempManualBuild.runName)"
                      -Message "Beginning Deployment"
                      -Success 1
                
                #download text-extractor build artifact
                - download: TempManualBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                  condition: succeeded()
                  
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/TempManualBuild/polaris-text-extractor-drop-2
                  
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Record End'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TempManualBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TempManualBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TempManualBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TempManualBuild.runName)"
                      -Message "Deployment Complete"
                      -Success 1
                      
                - bash: printenv | sort
                  condition: failed()
                      
                #send any errors to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Record Errors'
                  condition: failed()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TempManualBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PatToken: "$(devops-pat-token)"
                      -PipelineName "$(resources.pipeline.TempManualBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TempManualBuild.sourceCommit)"
                      -ReleaseId "$(System.JobId)"
                      -BuildName "$(resources.pipeline.TempManualBuild.runName)"
                      -Message "Deployment Failed"
                      -Success 0