# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: PolarisManualTerraformBuild
      source: Polaris - Manual Terraform Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: kv-qa-terraform
  - group: kv-prod-terraform
  - group: polaris-global
  - group: pipeline-terraform
  - group: ui-terraform
  - group: polaris-status-check-endpoints
  - group: polaris-vpn

stages:
  - stage: Apply_DEV
    displayName: Deployment > DEV
    pool:
      vmImage: ubuntu-latest
    jobs:
      - deployment: Manual_Deploy_Polaris_FullTerraform
        environment: "DEV"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: PolarisManualTerraformBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'

                #create vpn tunnel
                - bash: |
                    sudo apt-get --assume-yes --no-install-recommends install openvpn

                    chmod 777 vpnconfig.ovpn
                    envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

                    sudo openvpn _vpnconfig.ovpn &

                    sleep 5

                    ifconfig tun0

                    sudo rm /etc/resolv.conf
                    echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
                  env:
                    PRESHAREDKEY: $(dev_pre-shared_key)
                    PRIVATEKEY: $(dev_private_key)
                    CLIENTCERTIFICATE: $(dev_client_cert)
                    VPNSERVER: $(dev_vpn_server)
                    DNSSERVER: $(dev_dns_server)
                  displayName: Creating DEV VPN tunnel
                  
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download coordinator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-coordinator-drop
                
                #download pdf-generator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-pdf-generator-drop
                
                #download text-extractor build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-text-extractor-drop
                
                #download pipeline events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                #download ui terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download ui events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(dev-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsdevstorageterraform-key1)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=dev.tfplan -var-file="dev.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve dev.tfplan
                  displayName: Terraform > Apply to DEV
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download UI build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-dev"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-ui-drop
                
                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-gateway-drop
                
                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-dev-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-auth-handover-drop
                    
                # Set Log Analytics Archival Period - remove when supported natively by Terraform
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppEvents --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppRequests --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppServiceConsoleLogs --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                  displayName: Script > Set Log Analytics Archival Periods
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    LOG_RETENTION_TIME: $(log-retention-time)
                    TOTAL_LOG_RETENTION_TIME: $(total-log-retention-time)
                    TF_LOG: $(dev-log-level)
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-dev"
                    
  - stage: Check_DEV
    displayName: Status Check > DEV
    dependsOn:
      - Apply_DEV
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job:
        steps:
          #download templates artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'

          #create vpn tunnel
          - bash: |
              sudo apt-get --assume-yes --no-install-recommends install openvpn

              chmod 777 vpnconfig.ovpn
              envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

              sudo openvpn _vpnconfig.ovpn &

              sleep 5

              ifconfig tun0

              sudo rm /etc/resolv.conf
              echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
            workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
            env:
              PRESHAREDKEY: $(dev_pre-shared_key)
              PRIVATEKEY: $(dev_private_key)
              CLIENTCERTIFICATE: $(dev_client_cert)
              VPNSERVER: $(dev_vpn_server)
              DNSSERVER: $(dev_dns_server)
            displayName: Creating DEV VPN tunnel
            
          #download scripts artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
          
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Create_DEV_Report
    displayName: Create Report > DEV
    dependsOn: Check_DEV
    jobs:
      - job: Create_DEV_Report
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log dev...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-dev.csv
            displayName: Generate commit report for DEV

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-dev.csv"
              artifact: "Commit Report - DEV ($(System.JobAttempt))"
            displayName: "Publish Commit report for DEV"
                
  - stage: Update_DEV_Tag
    displayName: Update Tag > DEV
    dependsOn: Create_DEV_Report
    jobs:
      - job: Update_DEV_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/dev
                git tag -f dev
                git push origin dev 
            displayName: Updating the dev tag
            
  - stage: Apply_QA
    displayName: Deployment > QA
    dependsOn: 
      - Update_DEV_Tag
    pool:
      vmImage: ubuntu-latest
    jobs:
      - deployment: Manual_Deploy_Polaris_FullTerraform
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: PolarisManualTerraformBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'

                #create vpn tunnel
                - bash: |
                    sudo apt-get --assume-yes --no-install-recommends install openvpn

                    chmod 777 vpnconfig.ovpn
                    envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

                    sudo openvpn _vpnconfig.ovpn &

                    sleep 5

                    ifconfig tun0

                    sudo rm /etc/resolv.conf
                    echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
                  env:
                    PRESHAREDKEY: $(qa_pre-shared_key)
                    PRIVATEKEY: $(qa_private_key)
                    CLIENTCERTIFICATE: $(qa_client_cert)
                    VPNSERVER: $(qa_vpn_server)
                    DNSSERVER: $(qa_dns_server)
                  displayName: Creating QA VPN tunnel
                  
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: $(terraform-version)
                
                #download pipeline terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                    
                #download coordinator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-coordinator-drop
                
                #download pdf-generator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-qa-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-pdf-generator-drop
                
                #download text-extractor build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-qa-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-text-extractor-drop
                
                #download pipeline events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                #download ui terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                    
                #download ui events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(qa-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsqastorageterraform-key1)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=qa.tfplan -var-file="qa.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: $(qa-log-level)
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve qa.tfplan
                  displayName: Terraform > Apply to QA
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    TF_LOG: 
                      
                #download UI build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris-qa"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-ui-drop
                
                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-gateway-drop
                
                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to QA'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-qa-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-auth-handover-drop
                    
                # Set Log Analytics Archival Period - remove when supported natively by Terraform
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-qa --workspace-name la-polaris-qa --name AppEvents --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-qa --workspace-name la-polaris-qa --name AppRequests --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-qa --workspace-name la-polaris-qa --name AppServiceConsoleLogs --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                  displayName: Script > Set Log Analytics Archival Periods
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-qa-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-qa-spn-secret)
                    ARM_TENANT_ID: $(innovation-qa-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-qa-subscription-id)
                    LOG_RETENTION_TIME: $(log-retention-time)
                    TOTAL_LOG_RETENTION_TIME: $(total-log-retention-time)
                    TF_LOG: $(qa-log-level)
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(qa-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris-qa"
                    
  - stage: Check_QA
    displayName: Status Check > QA
    dependsOn:
      - Apply_QA
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job:
        steps:
          #download templates artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'

          #create vpn tunnel
          - bash: |
              sudo apt-get --assume-yes --no-install-recommends install openvpn

              chmod 777 vpnconfig.ovpn
              envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

              sudo openvpn _vpnconfig.ovpn &

              sleep 5

              ifconfig tun0

              sudo rm /etc/resolv.conf
              echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
            workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
            env:
              PRESHAREDKEY: $(qa_pre-shared_key)
              PRIVATEKEY: $(qa_private_key)
              CLIENTCERTIFICATE: $(qa_client_cert)
              VPNSERVER: $(qa_vpn_server)
              DNSSERVER: $(qa_dns_server)
            displayName: Creating QA VPN tunnel
            
          #download scripts artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking QA UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(qa-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
                
  - stage: Create_QA_Report
    displayName: Create Report > QA
    dependsOn: Check_QA
    jobs:
      - job: Create_QA_Report
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log qa...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-qa.csv
            displayName: Generate commit report for QA

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-qa.csv"
              artifact: "Commit Report - QA ($(System.JobAttempt))"
            displayName: "Publish Commit report for QA"
                
  - stage: Update_QA_Tag
    displayName: Update Tag > QA
    dependsOn: Create_QA_Report
    jobs:
      - job: Update_QA_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/qa
                git tag -f qa
                git push origin qa 
            displayName: Updating the qa tag
            
  - stage: Apply_PROD
    displayName: Deployment > PROD
    dependsOn:
      - Update_DEV_Tag
    pool:
      vmImage: ubuntu-latest
    jobs:
      - deployment: Manual_Deploy_Polaris_FullTerraform
        environment: "Prod"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: PolarisManualTerraformBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'

                #create vpn tunnel
                - bash: |
                    sudo apt-get --assume-yes --no-install-recommends install openvpn

                    chmod 777 vpnconfig.ovpn
                    envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

                    sudo openvpn _vpnconfig.ovpn &

                    sleep 5

                    ifconfig tun0

                    sudo rm /etc/resolv.conf
                    echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
                  env:
                    PRESHAREDKEY: $(prod_pre-shared_key)
                    PRIVATEKEY: $(prod_private_key)
                    CLIENTCERTIFICATE: $(prod_client_cert)
                    VPNSERVER: $(prod_vpn_server)
                    DNSSERVER: $(prod_dns_server)
                  displayName: Creating PROD VPN tunnel
                  
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: $(terraform-version)

                #download pipeline terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)

                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
                #download coordinator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Coordinator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-coordinator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-coordinator-drop

                #download pdf-generator build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy PDF Generator Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-pdf-generator"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-pdf-generator-drop

                #download text-extractor build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Text Extractor Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-text-extractor"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-text-extractor-drop

                #download pipeline events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(pipeline-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)

                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)

                #download ui terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)

                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
                #download ui events terraform build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Terraform > Download UI Events terraform build
                  artifact: "ui-events-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: $(prod-terraform-storage-account)
                    TF_STATE_CONTAINER_NAME: $(ui-events-terraform-container-name)
                    TF_STATE_KEY: $(terraform-key)
                    TF_STATE_ACCESS_KEY: $(cpsprodstorageterraform-key1)
                    TF_LOG: $(prod-log-level)

                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=prod.tfplan -var-file="prod.tfvars"
                  displayName: 'Terraform > Write UI Events Plan'
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve prod.tfplan
                  displayName: Terraform > Apply to PROD
                  workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    TF_LOG: $(prod-log-level)
                    
                #download UI build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"

                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: webAppLinux
                    WebAppName: "as-web-polaris"
                    packageForLinux: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-ui-drop

                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-gateway"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-gateway-drop

                #download gateway build artifact
                - download: PolarisManualTerraformBuild
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to PROD'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-auth-handover-drop
                    
                # Set Log Analytics Archival Period - remove when supported natively by Terraform
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics --workspace-name la-polaris --name AppEvents --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics --workspace-name la-polaris --name AppRequests --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics --workspace-name la-polaris --name AppServiceConsoleLogs --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                  displayName: Script > Set Log Analytics Archival Periods
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: $(innovation-prod-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-prod-spn-secret)
                    ARM_TENANT_ID: $(innovation-prod-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-prod-subscription-id)
                    LOG_RETENTION_TIME: $(log-retention-time)
                    TOTAL_LOG_RETENTION_TIME: $(total-log-retention-time)
                    TF_LOG: $(prod-log-level)

                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: $(prod-azure-subscription)
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris"
                    
  - stage: Check_PROD
    displayName: Status Check > PROD
    dependsOn:
      - Apply_PROD
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job:
        steps:
          #download templates artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'

          #create vpn tunnel
          - bash: |
              sudo apt-get --assume-yes --no-install-recommends install openvpn

              chmod 777 vpnconfig.ovpn
              envsubst < vpnconfig.ovpn > _vpnconfig.ovpn

              sudo openvpn _vpnconfig.ovpn &

              sleep 5

              ifconfig tun0

              sudo rm /etc/resolv.conf
              echo "nameserver $DNSSERVER" | sudo tee /etc/resolv.conf
            workingDirectory: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-template-files
            env:
              PRESHAREDKEY: $(prod_pre-shared_key)
              PRIVATEKEY: $(prod_private_key)
              CLIENTCERTIFICATE: $(prod_client_cert)
              VPNSERVER: $(prod_vpn_server)
              DNSSERVER: $(prod_dns_server)
            displayName: Creating PROD VPN tunnel
            
          #download scripts artifact
          - download: PolarisManualTerraformBuild
            displayName: Download Pipeline Scripts
            artifact: 'polaris-script-files'

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Coordinator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD PDF-Generator status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Text-Extractor status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query auth-handover status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Auth-Handover status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-auth-handover-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query gateway status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Gateway status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-gateway-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD Proxy status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-proxy-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "Polaris Proxy is online"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query proxy status endpoint
          - task: PowerShell@2
            displayName: 'Checking PROD UI status'
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/PolarisManualTerraformBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(prod-ui-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.PolarisManualTerraformBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

  - stage: Create_PROD_Report
    displayName: Create Report > PROD
    dependsOn: Check_PROD
    jobs:
      - job: Create_PROD_Report
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log prod...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-prod.csv
            displayName: Generate commit report for PROD

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-prod.csv"
              artifact: "Commit Report - PROD ($(System.JobAttempt))"
            displayName: "Publish Commit report for PROD"
                
  - stage: Update_PROD_Tag
    displayName: Update Tag > PROD
    dependsOn: Create_PROD_Report
    jobs:
      - job: Update_PROD_Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
            persistCredentials: true
            
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/prod
                git tag -f prod
                git push origin prod 
            displayName: Updating the prod tag