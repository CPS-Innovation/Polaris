# Pull Request Azure DevOps pipeline for the entire Polaris Codebase

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - polaris-gateway/*
      - polaris-pipeline/*
      - polaris-ui/*
      - polaris-e2e/*

variables:
  - group: polaris-global
  - name: buildConfiguration
    value: "Release"
  - name: templatesWorkingDir
    value: "$(System.DefaultWorkingDirectory)/polaris-devops-pipelines/templates"

stages:
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          name: $(dev-build-agent)
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only origin/main)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "Total changed $count files"
                
                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*' -Or $name -like 'polaris-pipeline/coordinator.tests/*')
                  {
                    echo "run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*' -Or $name -like 'polaris-pipeline/pdf-generator.tests/*')
                  {
                    echo "run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*' -Or $name -like 'polaris-pipeline/text-extractor.tests/*')
                  {
                    echo "run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*' -Or $name -like 'polaris-gateway/polaris-gateway.tests/*')
                  {
                    echo "run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo

  - stage: Validate_Gateway_Codebase
    displayName: Validate Gateway Codebase
    dependsOn: Determine_Changes
    condition: and(succeeded(), eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true'))
    variables:
      runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY']]
      runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER']]
    jobs:
      - job:
        displayName: Build, Test, Report - Gateway
        pool:
          name: $(dev-build-agent)
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-gateway/polaris-auth-handover/polaris-auth-handover.csproj"
              arguments: "--configuration Release"
            displayName: "Build Auth Handover"
            condition: eq(variables.runAuthHandover, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-gateway/polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Gateway"
            condition: eq(variables.runGateway, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-gateway/polaris-gateway.tests/polaris-gateway.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Gateway tests"
            condition: eq(variables.runGateway, 'true')

          - publish: $(System.DefaultWorkingDirectory)/polaris-gateway/polaris-gateway.tests/coverage.cobertura.xml
            artifact: GatewayTestResults
            displayName: Publish Gateway Test Results
            condition: eq(variables.runGateway, 'true')

  - stage: Validate_Pipeline_Codebase
    displayName: Validate Pipeline Codebase
    dependsOn: Determine_Changes
    condition: and(succeeded(), eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true'))
    variables:
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR']]
    jobs:
      - job:
        displayName: Build, Test, Report - Pipeline (Ubuntu)
        pool:
          name: $(dev-build-agent)
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/coordinator/coordinator.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Coordinator"
            condition: eq(variables.runCoordinator, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/text-extractor/text-extractor.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build Text Extractor"
            condition: eq(variables.runTextExtractor, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/Common.tests/Common.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Common Library tests"

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/Common.tests/coverage.cobertura.xml
            artifact: CommonLibraryTestResults
            displayName: Publish Common Library Test Results

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/coordinator.tests/coordinator.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Coordinator tests"
            condition: eq(variables.runCoordinator, 'true')

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/coordinator.tests/coverage.cobertura.xml
            artifact: CoordinatorTestResults
            displayName: Publish Coordinator Test Results
            condition: eq(variables.runCoordinator, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/text-extractor.tests/text-extractor.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Text-Extractor tests"
            condition: eq(variables.runTextExtractor, 'true')

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/text-extractor.tests/coverage.cobertura.xml
            artifact: TextExtractorTestResults
            displayName: Publish Text-Extractor Test Results
            condition: eq(variables.runTextExtractor, 'true')

      - job:
        displayName: Build, Test, Report - Pipeline (Windows)
        pool:
          vmImage: windows-latest
        steps:
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: 'Aspose.Total.NET.lic'
            displayName: 'Download Aspose Licence'
            condition: eq(variables.runPdfGenerator, 'true')

          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: 'polaris-pipeline/pdf-generator'
            displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'
            condition: eq(variables.runPdfGenerator, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "polaris-pipeline/pdf-generator/pdf-generator.csproj"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build PDF Generator"
            condition: eq(variables.runPdfGenerator, 'true')

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              projects: "polaris-pipeline/pdf-generator.tests/pdf-generator.tests.csproj"
              arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
            displayName: "Run Pdf-Generator tests"
            condition: eq(variables.runPdfGenerator, 'true')

          - publish: $(System.DefaultWorkingDirectory)/polaris-pipeline/pdf-generator.tests/coverage.cobertura.xml
            artifact: PdfGeneratorTestResults
            displayName: Publish Pdf-Generator Test Results
            condition: eq(variables.runPdfGenerator, 'true')

  - stage: Validate_UI_Codebase
    displayName: Validate UI Codebase
    dependsOn: Determine_Changes
    condition: and(succeeded(), eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_CODEBASE'], 'true'))
    jobs:
      - job:
        displayName: Build, Test, Report - UI
        pool:
          vmImage: ubuntu-latest
        steps:
          # Begin UI testing      
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            inputs:
              contents: |
                polaris-ui/.env

          - task: Npm@1
            inputs:
              command: "install"
              workingDir: "polaris-ui"
            displayName: "npm install"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run test:ci"
            displayName: "npm test"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run cy:ci"
            displayName: "cypress run tests"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build"
            displayName: "npm build"

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run coverage"
            displayName: "combine unit and cypress coverage"

          - task: PublishBuildArtifacts@1
            condition: always() # this step will always run, helpful to diagnose failing cypress testts
            inputs:
              PathtoPublish: "polaris-ui/cypress/videos"
              ArtifactName: "Cypress failure vidoes"
              publishLocation: "Container"
            displayName: "Publish UI Cypress Failure Videos"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/report"
              ArtifactName: "Unit test report"
              publishLocation: "Container"
            displayName: "Publish UI Unit Test Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/report-cypress"
              ArtifactName: "Cypress test report"
              publishLocation: "Container"
            displayName: "Publish UI Cypress Test Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage"
              ArtifactName: "Unit test coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Unit Test Coverage Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage-cypress"
              ArtifactName: "Cypress coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Cypress Coverage Report"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/coverage-merged"
              ArtifactName: "Merged coverage report"
              publishLocation: "Container"
            displayName: "Publish UI Merged Coverage Report"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "polaris-ui/report/*.xml"
              testRunTitle: "Unit tests"
            displayName: "Publish UI Unit Test XML"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "polaris-ui/report-cypress/test-*.xml"
              testRunTitle: "Cypress tests"
              mergeTestResults: true
            displayName: "Publish UI Unit Test Cypress Tests XML"

          - script: |
              cp $(System.DefaultWorkingDirectory)/polaris-ui/coverage-merged/cobertura-coverage.xml $(System.DefaultWorkingDirectory)/uiresults.cobertura.xml
            displayName: 'Moving ui coverage results'

          - publish: $(System.DefaultWorkingDirectory)/uiresults.cobertura.xml
            artifact: UITestResults

  - stage: Generate_Reports
    displayName: Collate and publish test results
    dependsOn:
      - Validate_Gateway_Codebase
      - Validate_Pipeline_Codebase
      - Validate_UI_Codebase
    condition: or(eq(dependencies.Validate_Gateway_Codebase.result, 'Succeeded'),eq(dependencies.Validate_Pipeline_Codebase.result, 'Succeeded'),eq(dependencies.Validate_UI_Codebase.result, 'Succeeded'))
    jobs:
      - job:
        displayName: Build, Test, Report - UI
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Install ReportGenerator'
            inputs:
              command: custom
              custom: tool
              arguments: 'install --global dotnet-reportgenerator-globaltool'

          - script: echo "##vso[task.prependpath]$HOME/.dotnet/tools"
            displayName: 'Update PATH'

          - download: current
            patterns: '**/*.cobertura.xml'
            displayName: Retrieve published test reports

          - script: |
              reportgenerator -reports:$(Pipeline.Workspace)/**/*.cobertura.xml -targetdir:$(Pipeline.Workspace)/CodeCoverage -reporttypes:Cobertura
            displayName: 'Create code coverage report'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: '$(Pipeline.Workspace)/CodeCoverage/Cobertura.xml'