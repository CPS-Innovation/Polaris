# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
  - pipeline: PolarisCodebaseBuild
    source: Polaris - Build Codebase
    trigger:
      branches:
        include:
        - refs/heads/main
      stages:
      - Publish_Artifacts

variables:
- group: polaris-global
- group: polaris-status-check-endpoints
- group: kv-dev-terraform
- group: kv-qa-terraform
- group: kv-prod-terraform

stages:
- template: stages/deploy-codebase.yml
  parameters:
    stageName: "DeployDEV"
    displayName: "Deployment > DEV"
    buildAgent: $(dev-build-agent)
    buildLabel: "PolarisCodebaseBuild"
    appInsightsKey: $(innovation-development-app-insights-instrumentation-key)
    devOpsEnv: "Dev"
    envLabel: "DEV"
    envSuffix: "-dev"
    azureSubscription: $(dev-azure-subscription)
    devOpsPatToken: $(devops-pat-token)

- template: stages/status-checks.yml
  parameters:
    stageName: "CheckDEV"
    displayName: "Status Checks > DEV"
    buildAgent: $(dev-build-agent)
    buildLabel: "PolarisCodebaseBuild"
    appInsightsKey: $(innovation-development-app-insights-instrumentation-key)
    dependsOn: "DeployDEV"
    envLabel: "DEV"
    successText: $(resources.pipeline.PolarisBuild.runName)
    statusCheckMethod: $(status-check-method)
    statusCheckRetries: $(status-check-retries)
    statusCheckDelay: $(status-check-delay-seconds)
    statusCheckTimeout: $(status-check-timeout-seconds)
    coordinatorStatusUrl: $(dev-coordinator-status-url)
    pdfGeneratorStatusUrl: $(dev-pdf-generator-status-url)
    textExtractorStatusUrl: $(dev-text-extractor-status-url)
    authHandoverStatusUrl: $(dev-auth-handover-status-url)
    gatewayStatusUrl: $(dev-gateway-status-url)
    proxyStatusUrl: $(dev-proxy-status-url)
    uiStatusUrl: $(dev-ui-status-url)

- stage: Create_DEV_Report
  displayName: Create Report > DEV
  dependsOn: Check_DEV
  jobs:
    - job: Create_DEV_Report
      pool:
        name: $(dev-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'
        
        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Create Report - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git log dev...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-dev.csv
          displayName: Generate commit report for DEV

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.Repository.LocalPath)/commit-report-dev.csv"
            artifact: "Commit Report - DEV ($(System.JobAttempt))"
          displayName: "Publish Commit report for DEV"
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Create Report - Completed"
        
        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Create Report - Failed"

- stage: Update_DEV_Tag
  displayName: Update Tag > DEV
  dependsOn: Create_DEV_Report
  condition: succeeded()
  jobs:
    - job: Update_DEV_Tag
      pool:
        name: $(dev-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'
        
        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Update Tag - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git config user.name "$BUILD_REQUESTEDFOR"
              git config user.email "$BUILD_REQUESTEDFOREMAIL"
              
              git push origin :refs/tags/dev
              git tag -f dev
              git push origin dev
          displayName: Updating the dev tag
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Update Tag - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Update Tag - Failed"

- stage: Run_e2e_Tests_DEV
  displayName: Run e2e tests > DEV
  dependsOn:
    - Apply_DEV
    - Check_DEV
    - Update_DEV_Tag
  condition: succeeded()
  jobs:
    - job: Run_e2e_Tests_DEV
      pool:
        name: $(dev-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'
        
        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Run e2e Tests - Started"

        - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
          displayName: 'Run the e2e tests: DEV'
          inputs:
            buildDefinition: 129
            waitForQueuedBuildsToFinish: true
            cancelBuildsIfAnyFails: true
            password: $(devops-pat-token)
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Run e2e Tests - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "DEV CI Codebase Deployment: Run e2e Tests - Failed"

- stage: Apply_QA
  displayName: Deployment > QA
  dependsOn:
    - Run_e2e_Tests_DEV
  condition: succeeded()
  variables:
    runPipelineTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_QA']]
    runPipelineEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_QA']]
    runUITerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_QA']]
    runUIEventsTerraform: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_QA']]
    runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_QA']]
    runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_QA']]
    runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_QA']]
    runGateway: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_QA']]
    runAuthHandover: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_QA']]
    runUICodebase: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_QA']]
  pool:
    name: $(qa-build-agent)
  jobs:
    - deployment: CI_Deploy_Polaris
      environment: "QA"
      strategy:
        runOnce:
          deploy:
            steps:
              #download templates artifact
              - download: PolarisCodebaseBuild
                displayName: Download Templates
                artifact: 'polaris-template-files'
              
              #download scripts artifact
              - download: PolarisCodebaseBuild
                displayName: Download Scripts
                artifact: 'polaris-script-files'

              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                condition: succeeded()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Started"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Coordinator - Started"
              
              #download coordinator build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Coordinator Codebase Build
                artifact: "polaris-coordinator-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Coordinator Azure Function App to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-pipeline-qa-coordinator"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-coordinator-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Coordinator - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish PDF Generator - Started"
              
              #download pdf-generator build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download PDF Generator Codebase Build
                artifact: "polaris-pdf-generator-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy PDF Generator Azure Function App to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: functionApp
                  appName: "fa-polaris-pipeline-qa-pdf-generator"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-pdf-generator-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish PDF Generator - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Text Extractor - Started"
              
              #download text-extractor build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Text Extractor Codebase Build
                artifact: "polaris-text-extractor-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Text Extractor Azure Function App to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-pipeline-qa-text-extractor"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-text-extractor-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Text Extractor - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish SPA - Started"
              
              #download UI build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download SPA Codebase Build
                artifact: "polaris-ui-drop"

              # Deploy Related Codebase to Env
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy UI App Service to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: webAppLinux
                  WebAppName: "as-web-polaris-qa"
                  packageForLinux: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-ui-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish SPA - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Gateway - Started"
              
              #download gateway build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Gateway Codebase Build
                artifact: "polaris-gateway-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Gateway Azure Function App to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-qa-gateway"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-gateway-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Gateway - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Auth Handover - Started"
              
              #download gateway build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Auth Handover Codebase Build
                artifact: "polaris-auth-handover-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Auth Handover Azure Function App to QA'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-qa-auth-handover"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-auth-handover-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Publish Auth Handover - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Restart SPA - Started"
              
              # Restart app service    
              - task: AzureAppServiceManage@0
                displayName: 'Restart Azure App Service'
                inputs:
                  azureSubscription: $(qa-azure-subscription)
                  Action: 'Restart Azure App Service'
                  WebAppName: "as-web-polaris-qa"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Restart SPA - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                condition: succeeded()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Completed"
              
              #send any errors to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Record Errors'
                condition: failed()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
                    -PatToken: "$(devops-pat-token)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -ReleaseId "$(Build.BuildId)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "QA CI Codebase Deployment: Failed"

- stage: Check_QA
  displayName: Status Checks > QA
  dependsOn:
    - Apply_QA
  condition: succeeded()
  pool:
    name: $(qa-build-agent)
  jobs:
    - job: Run_Status_Checks
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'
        
        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Status Checks - Started"  
        
        #query coordinator status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA Coordinator status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-coordinator-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query pdf-generator status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA PDF-Generator status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-pdf-generator-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query text-extractor status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA Text-Extractor status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-text-extractor-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query auth-handover status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA Auth-Handover status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-auth-handover-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query gateway status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA Gateway status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-gateway-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query proxy status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA Proxy status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-proxy-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "Polaris Proxy is online"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)
        
        #query proxy status endpoint
        - task: PowerShell@2
          displayName: 'Checking QA UI status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(qa-ui-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Status Checks - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Status Checks - Failed"

- stage: Create_QA_Report
  displayName: Create Report > QA
  dependsOn: Check_QA
  jobs:
    - job: Create_QA_Report
      pool:
        name: $(qa-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Create Report - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git log qa...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-qa.csv
          displayName: Generate commit report for QA

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.Repository.LocalPath)/commit-report-qa.csv"
            artifact: "Commit Report - QA ($(System.JobAttempt))"
          displayName: "Publish Commit report for QA"
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Create Report - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Create Report - Failed"

- stage: Update_QA_Tag
  displayName: Update Tag > QA
  dependsOn: Create_QA_Report
  condition: succeeded()
  jobs:
    - job: Update_QA_Tag
      pool:
        name: $(qa-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Update Tag - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git config user.name "$BUILD_REQUESTEDFOR"
              git config user.email "$BUILD_REQUESTEDFOREMAIL"
              
              git push origin :refs/tags/qa
              git tag -f qa
              git push origin qa 
          displayName: Updating the qa tag
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Update Tag - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Update Tag - Failed"

- stage: Run_e2e_Tests_QA
  displayName: Run e2e tests > QA
  dependsOn:
    - Apply_QA
    - Check_QA
    - Update_QA_Tag
  condition: succeeded()
  jobs:
    - job: Run_e2e_Tests_QA
      pool:
        name: $(qa-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Run e2e Tests - Started"

        - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
          displayName: 'Run the e2e tests: QA'
          inputs:
            buildDefinition: 210
            waitForQueuedBuildsToFinish: true
            cancelBuildsIfAnyFails: true
            password: $(devops-pat-token)
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Run e2e Tests - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-qa-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "QA CI Codebase Deployment: Run e2e Tests - Failed"

- stage: Apply_PROD
  displayName: Deployment > PROD
  dependsOn:
    - Run_e2e_Tests_DEV
  condition: succeeded()
  pool:
    name: $(prod-build-agent)
  jobs:
    - deployment: CI_Deploy_Polaris
      environment: "Prod"
      strategy:
        runOnce:
          deploy:
            steps:
              #download templates artifact
              - download: PolarisCodebaseBuild
                displayName: Download Templates
                artifact: 'polaris-template-files'
              
              #download scripts artifact
              - download: PolarisCodebaseBuild
                displayName: Download Scripts
                artifact: 'polaris-script-files'

              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                condition: succeeded()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Started"
              
             #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Coordinator - Started"
              
              #download coordinator build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Coordinator Codebase Build
                artifact: "polaris-coordinator-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Coordinator Azure Function App to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-pipeline-coordinator"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-coordinator-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Coordinator - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish PDF Generator - Started"
              
              #download pdf-generator build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download PDF Generator Codebase Build
                artifact: "polaris-pdf-generator-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy PDF Generator Azure Function App to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: functionApp
                  appName: "fa-polaris-pipeline-pdf-generator"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-pdf-generator-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish PDF Generator - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Text Extractor - Started"
              
              #download text-extractor build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Text Extractor Codebase Build
                artifact: "polaris-text-extractor-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Text Extractor Azure Function App to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-pipeline-text-extractor"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-text-extractor-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Text Extractor - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish SPA - Started"
              
              #download UI build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download SPA Codebase Build
                artifact: "polaris-ui-drop"

              # Deploy Related Codebase to Env
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy UI App Service to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: webAppLinux
                  WebAppName: "as-web-polaris"
                  packageForLinux: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-ui-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish SPA - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Gateway - Started"
              
              #download gateway build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Gateway Codebase Build
                artifact: "polaris-gateway-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Gateway Azure Function App to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-gateway"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-gateway-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Gateway - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Auth Handover - Started"
              
              #download gateway build artifact
              - download: PolarisCodebaseBuild
                displayName: Deploy > Download Auth Handover Codebase Build
                artifact: "polaris-auth-handover-drop"
              
              # Deploy Related Codebase to Env
              - task: AzureFunctionApp@1
                displayName: 'Deploy Auth Handover Azure Function App to PROD'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  appType: functionAppLinux
                  appName: "fa-polaris-auth-handover"
                  package: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-auth-handover-drop
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Publish Auth Handover - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Restart SPA - Started"
              
              # Restart app service    
              - task: AzureAppServiceManage@0
                displayName: 'Restart Azure App Service'
                inputs:
                  azureSubscription: $(prod-azure-subscription)
                  Action: 'Restart Azure App Service'
                  WebAppName: "as-web-polaris"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Restart SPA - Completed"
              
              #send custom event to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Trace'
                condition: succeeded()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Completed"

              #send any errors to AppInsights
              - task: PowerShell@2
                displayName: 'AppInsights: Record Errors'
                condition: failed()
                inputs:
                  failOnStderr: true
                  targetType: 'filePath'
                  filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
                  arguments: > # Use this to avoid newline characters in multi-line string
                    -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
                    -PatToken: "$(devops-pat-token)"
                    -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
                    -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
                    -ReleaseId "$(Build.BuildId)"
                    -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
                    -Message "PROD CI Codebase Deployment: Failed"

- stage: Check_PROD
  displayName: Status Checks > PROD
  dependsOn:
    - Apply_PROD
  condition: succeeded()
  pool:
    name: $(prod-build-agent)
  jobs:
    - job: Run_Status_Checks
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'
        
        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Status Checks - Started"
        
        #query coordinator status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD Coordinator status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-coordinator-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query pdf-generator status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD PDF-Generator status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-pdf-generator-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query text-extractor status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD Text-Extractor status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-text-extractor-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query auth-handover status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD Auth-Handover status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-auth-handover-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query gateway status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD Gateway status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-gateway-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)

        #query proxy status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD Proxy status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-proxy-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "Polaris Proxy is online"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)
        
        #query proxy status endpoint
        - task: PowerShell@2
          displayName: 'Checking PROD UI status'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/InvokeRequestWithRetry.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -URI $(prod-ui-status-url)
              -Method $(status-check-method)
              -SuccessTextContent "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Retries $(status-check-retries)
              -SecondsDelay $(status-check-delay-seconds)
              -TimeoutSec $(status-check-timeout-seconds)
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Status Checks - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Status Checks - Failed"

- stage: Create_PROD_Report
  displayName: Create Report > PROD
  dependsOn: Check_PROD
  jobs:
    - job: Create_PROD_Report
      pool:
        name: $(prod-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Create Report - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git log prod...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-prod.csv
          displayName: Generate commit report for PROD

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.Repository.LocalPath)/commit-report-prod.csv"
            artifact: "Commit Report - PROD ($(System.JobAttempt))"
          displayName: "Publish Commit report for PROD"
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Create Report - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Create Report - Failed"

- stage: Update_PROD_Tag
  displayName: Update Tag > PROD
  dependsOn: Create_PROD_Report
  condition: succeeded()
  jobs:
    - job: Update_PROD_Tag
      pool:
        name: $(prod-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Update Tag - Started"

        - checkout: self
          persistCredentials: true

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              git config user.name "$BUILD_REQUESTEDFOR"
              git config user.email "$BUILD_REQUESTEDFOREMAIL"
              
              git push origin :refs/tags/prod
              git tag -f prod
              git push origin prod 
          displayName: Updating the prod tag
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Update Tag - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Update Tag - Failed"

- stage: Run_e2e_Tests_PROD
  displayName: Run e2e tests > PROD
  dependsOn:
    - Apply_PROD
    - Check_PROD
    - Update_PROD_Tag
  condition: succeeded()
  jobs:
    - job: Run_e2e_Tests_PROD
      pool:
        name: $(prod-build-agent)
      steps:
        #download templates artifact
        - download: PolarisCodebaseBuild
          displayName: Download Templates
          artifact: 'polaris-template-files'

        #download scripts artifact
        - download: PolarisCodebaseBuild
          displayName: Download Scripts
          artifact: 'polaris-script-files'

        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          condition: succeeded()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Run e2e Tests - Started"

        - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
          displayName: 'Run the e2e tests: PROD'
          inputs:
            buildDefinition: 240
            waitForQueuedBuildsToFinish: true
            cancelBuildsIfAnyFails: true
            password: $(devops-pat-token)
        
        #send custom event to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Trace'
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Run e2e Tests - Completed"

        #send any errors to AppInsights
        - task: PowerShell@2
          displayName: 'AppInsights: Record Errors'
          condition: failed()
          inputs:
            failOnStderr: true
            targetType: 'filePath'
            filePath: $(Pipeline.Workspace)/PolarisCodebaseBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
            arguments: > # Use this to avoid newline characters in multi-line string
              -InstrumentationKey "$(innovation-prod-app-insights-instrumentation-key)"
              -PatToken: "$(devops-pat-token)"
              -PipelineName "$(resources.pipeline.PolarisCodebaseBuild.pipelineName)"
              -CommitId "$(resources.pipeline.PolarisCodebaseBuild.sourceCommit)"
              -ReleaseId "$(Build.BuildId)"
              -BuildName "$(resources.pipeline.PolarisCodebaseBuild.runName)"
              -Message "PROD CI Codebase Deployment: Run e2e Tests - Failed"