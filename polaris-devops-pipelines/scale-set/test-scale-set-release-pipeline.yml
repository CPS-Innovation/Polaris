# Unified Build and Release Azure DevOps pipeline for Polaris Terraform and Codebase

trigger: none
pr: none

resources:
  pipelines:
    - pipeline: TestScaleSetBuild
      source: Test Scale Set - Build
      trigger:
        branches:
          include:
            - refs/heads/main
        stages:
          - Publish_Artifacts

variables:
  - group: kv-dev-terraform
  - group: polaris-global
  - group: polaris-status-check-endpoints
  
stages:
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only --relative --diff-filter AMRD dev HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "******** Total changed $count files for DEV ********"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "DEV: run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "DEV: run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "DEV: run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "DEV: run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "DEV: changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "DEV: changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "DEV: changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-e2e/*')
                  {
                    echo "DEV: changes to the e2e tests detected make sure they are run..."
                    Write-Host "##vso[task.setvariable variable=RUN_E2E_TESTS_DEV;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo

  - stage: Apply_DEV
    displayName: Deployment > DEV
    condition: succeeded()
    dependsOn: Determine_Changes
    variables:
      runCoordinator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_DEV']]
      runPdfGenerator: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_DEV']]
      runTextExtractor: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_DEV']]
    pool:
      name: $(dev-build-agent)
    jobs:
      - deployment: CI_Deploy_Polaris
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
                #download templates artifact
                - download: TestScaleSetBuild
                  displayName: Download Templates
                  artifact: 'polaris-template-files'
                  
                #download scripts artifact
                - download: TestScaleSetBuild
                  displayName: Download Scripts
                  artifact: 'polaris-script-files'
                  
                #install nuget
                - bash: |
                    sudo yum install -y mono-complete
                    sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
                    sudo chmod +x /usr/local/bin/nuget
                    nuget install Microsoft.ApplicationInsights
                  displayName: Installing Application Insights
                  condition: succeeded()
                  
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Started"
                  
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Coordinator - Started"
                      
                # Set Durable Extension Code app setting, post Coordinator creation
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az account set --subscription $ARM_SUBSCRIPTION_ID
                    durable_code=$(az functionapp keys list --resource-group rg-polaris-pipeline-dev --name fa-polaris-pipeline-dev-coordinator --query 'systemKeys.durabletask_extension' --output tsv)
                    az functionapp config appsettings set --name fa-polaris-pipeline-dev-coordinator --resource-group rg-polaris-pipeline-dev --settings "PolarisPipelineCoordinatorDurableExtensionCode=$durable_code"
                  displayName: Script > Set Durable Task Extension Code for Sliding Clear-Down
                  workingDirectory: $(Pipeline.Workspace)/TestScaleSetBuild/pipeline-terraform-files
                  condition: succeeded()
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #download coordinator build artifact
                - download: TestScaleSetBuild
                  condition: succeeded()
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: succeeded()
                  displayName: 'Deploy Coordinator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-coordinator"
                    package: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-coordinator-drop
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Coordinator - Completed"
                      
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Pdf Generator - Started"
                
                #download pdf-generator build artifact
                - download: TestScaleSetBuild
                  condition: succeeded()
                  displayName: Deploy > Download PDF Generator Codebase Build
                  artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: succeeded()
                  displayName: 'Deploy PDF Generator Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionApp
                    appName: "fa-polaris-pipeline-dev-pdf-generator"
                    package: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-pdf-generator-drop
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Pdf Generator - Completed"
                      
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Text Extractor - Started"
                
                #download text-extractor build artifact
                - download: TestScaleSetBuild
                  condition: succeeded()
                  displayName: Deploy > Download Text Extractor Codebase Build
                  artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: succeeded()
                  displayName: 'Deploy Text Extractor Azure Function App to DEV'
                  inputs:
                    azureSubscription: $(dev-azure-subscription)
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline-dev-text-extractor"
                    package: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-text-extractor-drop
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Publish Text Extractor - Completed"
                      
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Set Log Analytics Archival Periods - Started"
                    
                # Set Log Analytics Archival Period - remove when supported natively by Terraform
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppEvents --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppRequests --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                    az monitor log-analytics workspace table update --resource-group rg-polaris-analytics-dev --workspace-name la-polaris-dev --name AppServiceConsoleLogs --retention-time $LOG_RETENTION_TIME --total-retention-time $TOTAL_LOG_RETENTION_TIME --subscription $ARM_SUBSCRIPTION_ID
                  displayName: Script > Set Log Analytics Archival Periods
                  workingDirectory: $(Pipeline.Workspace)/TestScaleSetBuild/ui-terraform-files
                  condition: succeeded()
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    LOG_RETENTION_TIME: $(log-retention-time)
                    TOTAL_LOG_RETENTION_TIME: $(total-log-retention-time)
                    TF_LOG: $(dev-log-level)
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Set Log Analytics Archival Periods - Completed"
                      
                # if pipeline components deployed, update Coordinator function keys in deployed Gateway
                - bash: |
                    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
                    az account set --subscription $ARM_SUBSCRIPTION_ID
                    default_code=$(az functionapp keys list --resource-group rg-polaris-pipeline-dev --name fa-polaris-pipeline-dev-coordinator --query 'functionKeys.default' --output tsv)
                    durable_code=$(az functionapp keys list --resource-group rg-polaris-pipeline-dev --name fa-polaris-pipeline-dev-coordinator --query 'systemKeys.durabletask_extension' --output tsv)
                    az functionapp config appsettings set --name fa-polaris-dev-gateway --resource-group rg-polaris-dev --settings "PolarisPipelineCoordinatorFunctionAppKey=$default_code"
                    az functionapp config appsettings set --name fa-polaris-dev-gateway --resource-group rg-polaris-dev --settings "PolarisPipelineCoordinatorDurableExtensionCode=$durable_code"
                  displayName: Script > Update Coordinator Keys In Gateway Config
                  workingDirectory: $(Pipeline.Workspace)/TestScaleSetBuild/pipeline-terraform-files
                  condition: succeeded()
                  env:
                    ARM_CLIENT_ID: $(innovation-development-spn-client-id)
                    ARM_CLIENT_SECRET: $(innovation-development-spn-secret)
                    ARM_TENANT_ID: $(innovation-development-spn-tenant-id)
                    ARM_SUBSCRIPTION_ID: $(innovation-development-subscription-id)
                    TF_LOG: $(dev-log-level)
                    
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Pipeline Terraform Processed, Update Coordinator App Keys in Gateway - Completed"
                      
                #send custom event to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Trace'
                  condition: succeeded()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Completed"
                      
                #send any errors to AppInsights
                - task: PowerShell@2
                  displayName: 'AppInsights: Record Errors'
                  condition: failed()
                  inputs:
                    failOnStderr: true
                    targetType: 'filePath'
                    filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
                    arguments: > # Use this to avoid newline characters in multi-line string
                      -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                      -PatToken: "$(devops-pat-token)"
                      -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                      -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                      -ReleaseId "$(Build.BuildId)"
                      -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                      -Message "DEV CI Deployment: Failed"
                    
  - stage: Check_DEV
    displayName: Status Checks > DEV
    dependsOn:
      - Determine_Changes
      - Apply_DEV
    condition: succeeded()
    pool:
      name: $(dev-build-agent)
    jobs:
      - job: Run_Status_Checks
        steps:
          #download templates artifact
          - download: TestScaleSetBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'
            
          #download scripts artifact
          - download: TestScaleSetBuild
            displayName: Download Scripts
            artifact: 'polaris-script-files'

          #install nuget
          - bash: |
              sudo yum install -y mono-complete
              sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
              sudo chmod +x /usr/local/bin/nuget
              nuget install Microsoft.ApplicationInsights
            displayName: Installing Application Insights
            condition: succeeded()
            
          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Status Checks - Started"

          #query coordinator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Coordinator status'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-coordinator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query pdf-generator status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV PDF-Generator status'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-pdf-generator-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)

          #query text-extractor status endpoint
          - task: PowerShell@2
            displayName: 'Checking DEV Text-Extractor status'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/InvokeRequestWithRetry.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -URI $(dev-text-extractor-status-url)
                -Method $(status-check-method)
                -SuccessTextContent "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Retries $(status-check-retries)
                -SecondsDelay $(status-check-delay-seconds)
                -TimeoutSec $(status-check-timeout-seconds)
      
  - stage: Create_DEV_Report
    displayName: Create Report > DEV
    dependsOn: Check_DEV
    jobs:
      - job: Create_DEV_Report
        pool:
          name: $(dev-build-agent)
        steps:
          #download templates artifact
          - download: TestScaleSetBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'
            
          #download scripts artifact
          - download: TestScaleSetBuild
            displayName: Download Scripts
            artifact: 'polaris-script-files'

          #install nuget
          - bash: |
              sudo yum install -y mono-complete
              sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
              sudo chmod +x /usr/local/bin/nuget
              nuget install Microsoft.ApplicationInsights
            displayName: Installing Application Insights
            condition: succeeded()

          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Create Report - Started"
            
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git log dev...HEAD --oneline --pretty=format:%h,%an,%ae,%s > commit-report-dev.csv
            displayName: Generate commit report for DEV

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.Repository.LocalPath)/commit-report-dev.csv"
              artifact: "Commit Report - DEV ($(System.JobAttempt))"
            displayName: "Publish Commit report for DEV"
            
          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Create Report - Completed"
                
          #send any errors to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Record Errors'
            condition: failed()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PatToken: "$(devops-pat-token)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -ReleaseId "$(Build.BuildId)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Create Report - Failed"

  - stage: Update_DEV_Tag
    displayName: Update Tag > DEV
    dependsOn: Create_DEV_Report
    condition: succeeded()
    jobs:
      - job: Update_DEV_Tag
        pool:
          name: $(dev-build-agent)
        steps:
          #download templates artifact
          - download: TestScaleSetBuild
            displayName: Download Templates
            artifact: 'polaris-template-files' 
          
          #download scripts artifact
          - download: TestScaleSetBuild
            displayName: Download Scripts
            artifact: 'polaris-script-files'

          #install nuget
          - bash: |
              sudo yum install -y mono-complete
              sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
              sudo chmod +x /usr/local/bin/nuget
              nuget install Microsoft.ApplicationInsights
            displayName: Installing Application Insights
            condition: succeeded()

          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Update Tag - Started"
                
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                git config user.name "$BUILD_REQUESTEDFOR"
                git config user.email "$BUILD_REQUESTEDFOREMAIL"
                
                git push origin :refs/tags/dev
                git tag -f dev
                git push origin dev
            displayName: Updating the dev tag
            
          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Update Tag - Completed"

          #send any errors to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Record Errors'
            condition: failed()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PatToken: "$(devops-pat-token)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -ReleaseId "$(Build.BuildId)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Update Tag - Failed"
                    
  - stage: Run_e2e_Tests_DEV
    displayName: Run e2e tests > DEV
    dependsOn: 
      - Determine_Changes
      - Apply_DEV
      - Check_DEV
      - Update_DEV_Tag
    condition: succeeded()
    jobs:
      - job: Run_e2e_Tests_DEV
        pool:
          vmImage: ubuntu-latest
        steps:
          #download templates artifact
          - download: TestScaleSetBuild
            displayName: Download Templates
            artifact: 'polaris-template-files'
            
          #download scripts artifact
          - download: TestScaleSetBuild
            displayName: Download Scripts
            artifact: 'polaris-script-files'

          #install nuget
          - bash: |
              sudo yum install -y mono-complete
              sudo wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O /usr/local/bin/nuget
              sudo chmod +x /usr/local/bin/nuget
              nuget install Microsoft.ApplicationInsights
            displayName: Installing Application Insights
            condition: succeeded()

          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Run e2e Tests - Started"
                
          - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@4
            displayName: 'Run the e2e tests: DEV'
            condition: succeeded()
            inputs:
              buildDefinition: 129
              waitForQueuedBuildsToFinish: true
              cancelBuildsIfAnyFails: true
              password: $(devops-pat-token)
              
          #send custom event to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Trace'
            condition: succeeded()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Run e2e Tests - Completed"

          #send any errors to AppInsights
          - task: PowerShell@2
            displayName: 'AppInsights: Record Errors'
            condition: failed()
            inputs:
              failOnStderr: true
              targetType: 'filePath'
              filePath: $(Pipeline.Workspace)/TestScaleSetBuild/polaris-script-files/SendCustomErrorEventToAppInsights.ps1
              arguments: > # Use this to avoid newline characters in multi-line string
                -InstrumentationKey "$(innovation-development-app-insights-instrumentation-key)"
                -PatToken: "$(devops-pat-token)"
                -PipelineName "$(resources.pipeline.TestScaleSetBuild.pipelineName)"
                -CommitId "$(resources.pipeline.TestScaleSetBuild.sourceCommit)"
                -ReleaseId "$(Build.BuildId)"
                -BuildName "$(resources.pipeline.TestScaleSetBuild.runName)"
                -Message "DEV CI Deployment: Run e2e Tests - Failed"