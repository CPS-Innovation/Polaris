---
parameters:
  - name: envLabel
    type: string
  - name: targetBuild
    type: string
  - name: targetLabel
    type: string
  - name: targetName
    type: string
  - name: targetSuffix
    type: string
  - name: appInsightsKey
    type: string
  - name: azureSubscription
    type: string
  - name: jobDependsOn
    type: object

jobs:
  - job: Start_Pipeline_Slots
    dependsOn: ${{ parameters.jobDependsOn }}
    strategy:
      matrix:
        Coordinator:
          Name: "Coordinator"
          AppServiceName: "fa-polaris${{ parameters.targetSuffix }}-coordinator"
        PDFGenerator:
          Name: "PDF Generator"
          AppServiceName: "fa-polaris${{ parameters.targetSuffix }}-pdf-generator"
        TextExtractor:
          Name: "Text Extractor"
          AppServiceName: "fa-polaris${{ parameters.targetSuffix }}-text-extractor"
    displayName: Start Staging1
    steps:
      - checkout: none
      - task: AzureAppServiceManage@0
        displayName: Start Slot
        inputs:
          Action: "Start Azure App Service"
          SpecifySlotOrASE: true
          Slot: "staging1"
          azureSubscription: ${{ parameters.azureSubscription }}
          ResourceGroupName: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
          WebAppName: $(AppServiceName)

  - job: Start_UI_Slots
    dependsOn: ${{ parameters.jobDependsOn }}
    strategy:
      matrix:
        SPA:
          Name: "SPA"
          AppServiceName: "as-web-polaris${{ parameters.targetSuffix }}"
        PolarisGateway:
          Name: "Polaris Gateway"
          AppServiceName: "fa-polaris${{ parameters.targetSuffix }}-gateway"
    displayName: Start Staging1
    steps:
      - checkout: none
      - task: AzureAppServiceManage@0
        displayName: Start slot
        inputs:
          Action: "Start Azure App Service"
          SpecifySlotOrASE: true
          Slot: "staging1"
          azureSubscription: ${{ parameters.azureSubscription }}
          ResourceGroupName: "rg-polaris${{ parameters.targetSuffix }}"
          WebAppName: $(AppServiceName)

  - deployment: DeployCoordinator
    dependsOn: Start_Pipeline_Slots
    environment: ${{ parameters.envLabel }}
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            # download scripts artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Download Scripts
              artifact: 'polaris-script-files'

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Coordinator - Started"

            # download coordinator build artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Deploy > Download Coordinator Codebase Build
              artifact: "polaris-coordinator-drop"

            # Deploy Related Codebase to Env
            - task: AzureFunctionApp@1
              displayName: 'Deploy Coordinator Azure Function App to ${{ parameters.targetLabel }}'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                appType: functionAppLinux
                appName: "fa-polaris${{ parameters.targetSuffix }}-coordinator"
                package: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-coordinator-drop
                deployToSlotOrASE: true
                resourceGroupName: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
                slotName: "staging1"

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Coordinator - Completed"

  - deployment: DeployPdfGenerator
    dependsOn: Start_Pipeline_Slots
    environment: ${{ parameters.envLabel }}
    strategy:
      runOnce:
        deploy:
          steps:
            # download scripts artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Download Scripts
              artifact: 'polaris-script-files'

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Pdf Generator - Started"

            # download pdf-generator build artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Deploy > Download PDF Generator Codebase Build
              artifact: "polaris-pdf-generator-drop"

            # Deploy Related Codebase to Env
            - task: AzureFunctionApp@1
              displayName: 'Deploy PDF Generator Azure Function App to ${{ parameters.targetLabel }}'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                appType: functionApp
                appName: "fa-polaris${{ parameters.targetSuffix }}-pdf-generator"
                package: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-pdf-generator-drop
                deployToSlotOrASE: true
                resourceGroupName: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
                slotName: "staging1"

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Pdf Generator - Completed"

  - deployment: DeployTextGenerator
    dependsOn: Start_Pipeline_Slots
    environment: ${{ parameters.envLabel }}
    strategy:
      runOnce:
        deploy:
          steps:
            # download scripts artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Download Scripts
              artifact: 'polaris-script-files'

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Text Extractor - Started"

            # download text-extractor build artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Deploy > Download Text Extractor Codebase Build
              artifact: "polaris-text-extractor-drop"

            # Deploy Related Codebase to Env
            - task: AzureFunctionApp@1
              displayName: 'Deploy Text Extractor Azure Function App to ${{ parameters.targetLabel }}'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                appType: functionAppLinux
                appName: "fa-polaris${{ parameters.targetSuffix }}-text-extractor"
                package: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-text-extractor-drop
                deployToSlotOrASE: true
                resourceGroupName: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
                slotName: "staging1"

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Text Extractor - Completed"
                
  - deployment: DeploySpa
    dependsOn: Start_UI_Slots
    environment: ${{ parameters.envLabel }}
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
            # download scripts artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Download Scripts
              artifact: 'polaris-script-files'

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish SPA - Started"

            # download UI build artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Deploy > Download SPA Codebase Build
              artifact: "polaris-ui-drop"

            # Deploy Related Codebase to Env
            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy SPA App Service to ${{ parameters.targetLabel }}'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                appType: webAppLinux
                WebAppName: "as-web-polaris${{ parameters.targetSuffix }}"
                packageForLinux: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-ui-drop
                deployToSlotOrASE: true
                resourceGroupName: "rg-polaris${{ parameters.targetSuffix }}"
                slotName: "staging1"

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish SPA - Completed"

            # send custom event to AppInsights
            #- template: steps/tasks/task_send-to-app-insights.yml
            #  parameters:
            #    appInsightsKey: ${{ parameters.appInsightsKey }}
            #    targetBuild: ${{ parameters.targetBuild }}
            #    message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Restarting SPA - Started"

            # Restart app service - moved away from deployment to buy some time
            #- task: AzureAppServiceManage@0
            #  displayName: 'Restart SPA Azure App Service'
            #  inputs:
            #    azureSubscription: ${{ parameters.azureSubscription }}
            #    Action: 'Restart Azure App Service'
            #    WebAppName: "as-web-polaris${{ parameters.targetSuffix }}"

            # send custom event to AppInsights
            #- template: steps/tasks/task_send-to-app-insights.yml
            #  parameters:
            #    appInsightsKey: ${{ parameters.appInsightsKey }}
            #    targetBuild: ${{ parameters.targetBuild }}
            #    message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Restarting SPA - Completed"

  - deployment: DeployGateway
    dependsOn: Start_UI_Slots
    environment: ${{ parameters.envLabel }}
    strategy:
      runOnce:
        deploy:
          steps:
            # download scripts artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Download Scripts
              artifact: 'polaris-script-files'

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Gateway - Started"

            # download gateway build artifact
            - download: ${{ parameters.targetBuild }}
              displayName: Deploy > Download Gateway Codebase Build
              artifact: "polaris-gateway-drop"

            # Deploy Related Codebase to Env
            - task: AzureFunctionApp@1
              displayName: 'Deploy Gateway Azure Function App to ${{ parameters.targetLabel }}'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                appType: functionAppLinux
                appName: "fa-polaris${{ parameters.targetSuffix }}-gateway"
                package: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-gateway-drop
                deployToSlotOrASE: true
                resourceGroupName: "rg-polaris${{ parameters.targetSuffix }}"
                slotName: "staging1"

            # send custom event to AppInsights
            - template: steps/tasks/task_send-to-app-insights.yml
              parameters:
                appInsightsKey: ${{ parameters.appInsightsKey }}
                targetBuild: ${{ parameters.targetBuild }}
                message: "${{ parameters.targetLabel }} ${{ parameters.targetName }}: Publish Gateway - Completed"
