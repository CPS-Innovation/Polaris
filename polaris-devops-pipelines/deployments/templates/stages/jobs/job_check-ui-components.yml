---
parameters:
  - name: targetBuild
    type: string
  - name: targetSuffix
    type: string
  - name: targetLabel
    type: string
  - name: authHandoverStatusUrl
    type: string
  - name: gatewayStatusUrl
    type: string
  - name: proxyStatusUrl
    type: string
  - name: spaStatusUrl
    type: string
  - name: statusCheckMethod
    type: string
  - name: statusCheckRetries
    type: string
  - name: statusCheckDelaySeconds
    type: string
  - name: statusCheckTimeoutSeconds
    type: string
  - name: armClientId
    type: string
  - name: armClientSecret
    type: string
  - name: armTenantId
    type: string
  - name: armSubscriptionId
    type: string
  - name: jobDependsOn
    type: object

jobs:
  - job: CheckAuthHandover
    dependsOn: ${{ parameters.jobDependsOn }}
    variables:
      slotName: $[dependencies.GenerateSlotName.outputs['slot.name']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'
        
      #retrieve ui component status endpoints in their correct staging slots
      - bash: |
          az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId
          az account set --subscription $subscriptionId
          authHandoverLocation=https://$(az webapp config hostname list --webapp-name $authHandoverAppName --resource-group $resourceGroup --slot $targetSlot --query '[0].name' -o tsv)
          gatewayLocation=https://$(az webapp config hostname list --webapp-name $gatewayAppName --resource-group $resourceGroup --slot $targetSlot --query '[0].name' -o tsv)
          spaLocation=https://$(az webapp config hostname list --webapp-name $spaAppName --resource-group $resourceGroup --slot $targetSlot --query '[0].name' -o tsv)

          echo "##vso[task.setvariable variable=authHandoverSlotUri;]$authHandoverLocation"
          echo "##vso[task.setvariable variable=gatewaySlotUri;]$gatewayLocation"
          echo "##vso[task.setvariable variable=spaSlotUri;]$spaLocation"
        displayName: Get URIs of Pipeline Components
        env:
          clientId: ${{ parameters.armClientId }}
          clientSecret: ${{ parameters.armClientSecret }}
          tenantId: ${{ parameters.armTenantId }}
          subscriptionId: ${{ parameters.armSubscriptionId }}
          targetSlot: $(slotName)
          authHandoverAppName: "fa-polaris${{ parameters.targetSuffix }}-auth-handover"
          gatewayAppName: "fa-polaris${{ parameters.targetSuffix }}-gateway"
          spaAppName: "as-web-polaris${{ parameters.targetSuffix }}"
          resourceGroup: "rg-polaris${{ parameters.targetSuffix }}"

      # query auth-handover status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Auth-Handover status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(authHandoverSlotUri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckGateway
    dependsOn: ${{ parameters.jobDependsOn }}
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query gateway status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Gateway status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(gatewaySlotUri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckProxy
    dependsOn: ${{ parameters.jobDependsOn }}
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query proxy status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Proxy status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetryNonNumeric.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI ${{ parameters.proxyStatusUrl }}
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "Polaris Proxy is online"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckSPA
    dependsOn: ${{ parameters.jobDependsOn }}
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query spa status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} UI status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(spaSlotUri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}
