---
parameters:
  - name: targetBuild
    type: string
  - name: targetSuffix
    type: string
  - name: targetLabel
    type: string
  - name: statusCheckMethod
    type: string
  - name: statusCheckRetries
    type: string
  - name: statusCheckDelaySeconds
    type: string
  - name: statusCheckTimeoutSeconds
    type: string
  - name: armClientId
    type: string
  - name: armClientSecret
    type: string
  - name: armTenantId
    type: string
  - name: armSubscriptionId
    type: string
  - name: jobDependsOn
    type: object

jobs:
  - job: GetStatusURIs
    dependsOn: ${{ parameters.jobDependsOn }}
    variables:
      slotName: $[dependencies.GenerateSlotName.outputs['slot.name']]
    steps:
      #retrieve app service status endpoints in their correct staging slots
      - bash: |
          az login --service-principal -u $clientId -p $clientSecret --tenant $tenantId
          az account set --subscription $subscriptionId
          coordinatorLocation=https://$(az webapp config hostname list --webapp-name $coordinatorAppName --resource-group $pipelineResourceGroup --query '[0].name' -o tsv)
          pdfGeneratorLocation=https://$(az webapp config hostname list --webapp-name $pdfGeneratorAppName --resource-group $pipelineResourceGroup --query '[0].name' -o tsv)
          textExtractorLocation=https://$(az webapp config hostname list --webapp-name $textExtractorAppName --resource-group $pipelineResourceGroup --slot $targetSlot --query '[0].name' -o tsv)
          authHandoverLocation=https://$(az webapp config hostname list --webapp-name $authHandoverAppName --resource-group $uiResourceGroup --query '[0].name' -o tsv)
          gatewayLocation=https://$(az webapp config hostname list --webapp-name $gatewayAppName --resource-group $uiResourceGroup --query '[0].name' -o tsv)
          spaLocation=https://$(az webapp config hostname list --webapp-name $spaAppName --resource-group $uiResourceGroup --query '[0].name' -o tsv)

          echo "##vso[task.setvariable variable=coordinatorSlotUri;isOutput=true]$coordinatorLocation"
          echo "##vso[task.setvariable variable=pdfGeneratorSlotUri;isOutput=true]$pdfGeneratorLocation"
          echo "##vso[task.setvariable variable=textExtractorSlotUri;isOutput=true]$textExtractorLocation"
          echo "##vso[task.setvariable variable=authHandoverSlotUri;isOutput=true]$authHandoverLocation"
          echo "##vso[task.setvariable variable=gatewaySlotUri;isOutput=true]$gatewayLocation"
          echo "##vso[task.setvariable variable=spaSlotUri;isOutput=true]$spaLocation"
        displayName: Get URIs of Pipeline Components
        name: uris
        env:
          clientId: ${{ parameters.armClientId }}
          clientSecret: ${{ parameters.armClientSecret }}
          tenantId: ${{ parameters.armTenantId }}
          subscriptionId: ${{ parameters.armSubscriptionId }}
          targetSlot: $(slotName)
          coordinatorAppName: "fa-polaris${{ parameters.targetSuffix }}-coordinator"
          pdfGeneratorAppName: "fa-polaris${{ parameters.targetSuffix }}-pdf-generator"
          textExtractorAppName: "fa-polaris${{ parameters.targetSuffix }}-text-extractor"
          authHandoverAppName: "fa-polaris${{ parameters.targetSuffix }}-auth-handover"
          gatewayAppName: "fa-polaris${{ parameters.targetSuffix }}-gateway"
          spaAppName: "as-web-polaris${{ parameters.targetSuffix }}"
          pipelineResourceGroup: "rg-polaris-pipeline${{ parameters.targetSuffix }}"
          uiResourceGroup: "rg-polaris${{ parameters.targetSuffix }}"
      
  - job: CheckCoordinator
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.coordinatorSlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'
      
      # query coordinator status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Coordinator status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckPDFGenerator
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.pdfGeneratorSlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query pdf-generator status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} PDF-Generator status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckTextExtractor
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.textExtractorSlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query text-extractor status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Text-Extractor Slot status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}
            
  - job: CheckAuthHandover
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.authHandoverSlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query auth-handover status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Auth-Handover status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckGateway
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.gatewaySlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query gateway status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} Gateway status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}

  - job: CheckSPA
    dependsOn: GetStatusURIs
    variables:
      uri: $[dependencies.GetStatusURIs.outputs['uris.spaSlotUri']]
    steps:
      # download scripts artifact
      - download: ${{ parameters.targetBuild }}
        displayName: Download Scripts
        artifact: 'polaris-script-files'

      # query spa status endpoint
      - task: PowerShell@2
        displayName: 'Checking ${{ parameters.targetLabel }} UI status'
        inputs:
          failOnStderr: true
          targetType: 'filePath'
          filePath: $(Pipeline.Workspace)/${{ parameters.targetBuild }}/polaris-script-files/InvokeRequestWithRetry.ps1
          arguments: > # Use this to avoid newline characters in multi-line string
            -URI "$(uri)/api/status"
            -Method ${{ parameters.statusCheckMethod }}
            -SuccessTextContent "$(resources.pipeline.${{ parameters.targetBuild }}.runName)"
            -Retries ${{ parameters.statusCheckRetries }}
            -SecondsDelay ${{ parameters.statusCheckDelaySeconds }}
            -TimeoutSec ${{ parameters.statusCheckTimeoutSeconds }}
