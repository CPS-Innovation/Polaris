name: '$(majorMinorVersion).$(Year:yy)$(DayOfYear).$(semanticVersion)-ci'

#trigger:
#  batch: true
#  branches:
#    include:
#      - main
#  paths:
#    include:
#      - polaris-terraform/ui-terraform/*
#      - polaris-terraform/ui-events-terraform/*

trigger: none # for testing only       
pr: none
  
variables:
  - group: polaris-global
  - name: buildConfiguration
    value: "Release"
  - name: majorMinorVersion
    value: "1.0"
  - name: semanticVersion
    value: "$[counter(variables['majorMinorVersion'], 1)]"
    
pool:
  name: $(dev-build-agent)
  
stages:
  - stage: Publish_Artifacts
    displayName: Publish artifacts
    jobs:
      - job: Build_Artifacts
        steps:
          - task: PublishPipelineArtifact@1
            displayName: "Publish pipeline scripts"
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-devops-pipelines/scripts"
              artifact: "polaris-script-files"
              publishLocation: "pipeline"
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI terraform artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-terraform/ui-terraform/'
              artifact: 'ui-terraform-files'
              publishLocation: 'pipeline'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI events terraform artifact'
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/ui-events-terraform/"
              artifact: "ui-events-terraform-files"
              publishLocation: "pipeline"
  
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-auth-handover/polaris-auth-handover.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Auth Handover package to publish"
            condition: or(eq(variables.runAuthHandoverDEV, 'true'),eq(variables.runAuthHandoverQA, 'true'),eq(variables.runAuthHandoverPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-auth-handover"
              artifact: "polaris-auth-handover-drop"
            displayName: "Publish Auth Handover codebase artifact"
            condition: or(eq(variables.runAuthHandoverDEV, 'true'),eq(variables.runAuthHandoverQA, 'true'),eq(variables.runAuthHandoverPROD, 'true'))
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Gateway package to publish"
            condition: or(eq(variables.runGatewayDEV, 'true'),eq(variables.runGatewayQA, 'true'),eq(variables.runGatewayPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-gateway"
              artifact: "polaris-gateway-drop"
            displayName: "Publish Gateway codebase artifact"
            condition: or(eq(variables.runGatewayDEV, 'true'),eq(variables.runGatewayQA, 'true'),eq(variables.runGatewayPROD, 'true'))
            
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))
            inputs:
              contents: |
                polaris-ui/.env
                
          # Add build version
          - task: PowerShell@2
            displayName: "Record build version"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))
            inputs:
              targetType: 'inline'
              workingDirectory: polaris-ui/public
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"ui`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"

          - task: Npm@1
            inputs:
              command: "install"
              workingDir: "polaris-ui"
            displayName: "npm install"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build"
            displayName: "npm build"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/build"
              ArtifactName: "polaris-ui-drop"
              publishLocation: "Container"
            displayName: Publish UI artifact
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))