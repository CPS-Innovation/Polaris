# Build and Publish Artifact Azure DevOps pipeline for Polaris Terraform and Codebase

name: '$(majorMinorVersion).$(Year:yy)$(DayOfYear).$(semanticVersion)-ci'

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - polaris-terraform/pipeline-terraform/*
      - polaris-terraform/pipeline-events-terraform/*
      - polaris-terraform/ui-terraform/*
      - polaris-terraform/ui-events-terraform/*
      - polaris-gateway/*
      - polaris-pipeline/*
      - polaris-ui/*
      - polaris-e2e/*
       
pr: none
  
variables:
  - group: polaris-global
  - name: buildConfiguration
    value: "Release"
  - name: majorMinorVersion
    value: "1.0"
  - name: semanticVersion
    value: "$[counter(variables['majorMinorVersion'], 1)]"
    
pool:
  name: $(dev-build-agent)
  
stages:
  - stage: Determine_Changes
    displayName: Determine Changes
    jobs:
      - job: Generate_Diff
        steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $files = $(git diff --name-only --relative --diff-filter AMRD dev HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "******** Total changed $count files for DEV ********"
                
                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "DEV: run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "DEV: run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_DEV;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "DEV: run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "DEV: run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "DEV: run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "DEV: run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "DEV: run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "DEV: run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "DEV: run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "DEV: run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "DEV: run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "DEV: changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "DEV: changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "DEV: changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_DEV;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_DEV;isOutput=true]true"
                  }
                }
                
                $files = $(git diff --name-only --relative --diff-filter AMRD qa HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "******** Total changed $count files for QA ********"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "QA: run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "QA: run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "QA: run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_QA;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "QA: run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "QA: run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "QA: run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "QA: run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "QA: run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "QA: run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "QA: run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "QA: run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "QA: run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "QA: changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "QA: changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "QA: changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_QA;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_QA;isOutput=true]true"
                  }
                }
                
                $files = $(git diff --name-only --relative --diff-filter AMRD prod HEAD)
                $temp=$files -split ' '
                $count=$temp.Length
                echo "******** Total changed $count files for PROD ********"

                For ($i=0; $i -lt $temp.Length; $i++)
                {
                  $name=$temp[$i]
                  echo "this is $name file"
                  if ($name -like 'polaris-terraform/pipeline-terraform/*')
                  {
                    echo "PROD: run pipeline terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/pipeline-events-terraform/*')
                  {
                    echo "PROD: run pipeline events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-terraform/ui-terraform/*')
                  {
                    echo "PROD: run ui terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_PROD;isOutput=true]true"                    
                  }
                  if ($name -like 'polaris-terraform/ui-events-terraform/*')
                  {
                    echo "PROD: run ui events terraform..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_EVENTS_TERRAFORM_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/*')
                  {
                    echo "PROD: run pipeline codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/coordinator/*')
                  {
                    echo "PROD: run coordinator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/pdf-generator/*')
                  {
                    echo "PROD: run pdf generator..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/text-extractor/*')
                  {
                    echo "PROD: run text extractor..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/*')
                  {
                    echo "PROD: run gateway codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway/*')
                  {
                    echo "PROD: run gateway..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-auth-handover/*')
                  {
                    echo "PROD: run auth handover..."
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-ui/*')
                  {
                    echo "PROD: run ui codebase..."
                    Write-Host "##vso[task.setvariable variable=RUN_UI_CODEBASE_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/DdeiClient/*')
                  {
                    echo "PROD: changes to DdeiClient detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-pipeline/Common/*')
                  {
                    echo "PROD: changes to the Pipeline's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_PDF_GENERATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_TEXT_EXTRACTOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                  if ($name -like 'polaris-gateway/polaris-gateway.common/*')
                  {
                    echo "PROD: changes to the Gateway's Common library detected run dependent code-bases..."
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_CODEBASE_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_PIPELINE_COORDINATOR_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_AUTH_HANDOVER_PROD;isOutput=true]true"
                    Write-Host "##vso[task.setvariable variable=RUN_GATEWAY_GATEWAY_PROD;isOutput=true]true"
                  }
                }
            name: Change_Results
            displayName: Processing changes to repo
        
  - stage: Publish_Artifacts
    displayName: Publish artifacts
    dependsOn: Determine_Changes
    condition: succeeded()
    variables:
      runPipelineTerraformDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_DEV']]
      runPipelineEventsTerraformDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_DEV']]
      runUITerraformDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_DEV']]
      runUIEventsTerraformDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_DEV']]
      runCoordinatorDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_DEV']]
      runPdfGeneratorDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_DEV']]
      runTextExtractorDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_DEV']]
      runGatewayDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_DEV']]
      runAuthHandoverDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_DEV']]
      runUICodebaseDEV: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_DEV']]
      
      runPipelineTerraformQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_QA']]
      runPipelineEventsTerraformQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_QA']]
      runUITerraformQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_QA']]
      runUIEventsTerraformQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_QA']]
      runCoordinatorQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_QA']]
      runPdfGeneratorQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_QA']]
      runTextExtractorQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_QA']]
      runGatewayQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_QA']]
      runAuthHandoverQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_QA']]
      runUICodebaseQA: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_QA']]
      
      runPipelineTerraformPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TERRAFORM_PROD']]
      runPipelineEventsTerraformPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM_PROD']]
      runUITerraformPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_TERRAFORM_PROD']]
      runUIEventsTerraformPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_EVENTS_TERRAFORM_PROD']]
      runCoordinatorPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_COORDINATOR_PROD']]
      runPdfGeneratorPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_PDF_GENERATOR_PROD']]
      runTextExtractorPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_PIPELINE_TEXT_EXTRACTOR_PROD']]
      runGatewayPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_GATEWAY_PROD']]
      runAuthHandoverPROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_GATEWAY_AUTH_HANDOVER_PROD']]
      runUICodebasePROD: $[stageDependencies.Determine_Changes.Generate_Diff.outputs['Change_Results.RUN_UI_CODEBASE_PROD']]
    jobs:
      - job: Build_Artifacts
        steps:
          - task: PublishPipelineArtifact@1
            displayName: "Publish pipeline scripts"
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-devops-pipelines/scripts"
              artifact: "polaris-script-files"
              publishLocation: "pipeline"
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline templates'
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-devops-pipelines/templates'
              artifact: 'polaris-template-files'
              publishLocation: 'pipeline'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline terraform artifact'
            condition: or(eq(variables.runPipelineTerraformDEV, 'true'),eq(variables.runPipelineTerraformQA, 'true'),eq(variables.runPipelineTerraformPROD, 'true'))
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-terraform/"
              artifact: "pipeline-terraform-files"
              publishLocation: "pipeline"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish pipeline events terraform artifact'
            condition: or(eq(variables.runPipelineEventsTerraformDEV, 'true'),eq(variables.runPipelineEventsTerraformQA, 'true'),eq(variables.runPipelineEventsTerraformPROD, 'true'))
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/pipeline-events-terraform/"
              artifact: "pipeline-events-terraform-files"
              publishLocation: "pipeline"
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI terraform artifact'
            condition: or(eq(variables.runUITerraformDEV, 'true'),eq(variables.runUITerraformQA, 'true'),eq(variables.runUITerraformPROD, 'true'))
            inputs:
              targetPath: '$(Pipeline.Workspace)/s/polaris-terraform/ui-terraform/'
              artifact: 'ui-terraform-files'
              publishLocation: 'pipeline'
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish UI events terraform artifact'
            condition: or(eq(variables.runUIEventsTerraformDEV, 'true'),eq(variables.runUIEventsTerraformQA, 'true'),eq(variables.runUIEventsTerraformPROD, 'true'))
            inputs:
              targetPath: "$(Pipeline.Workspace)/s/polaris-terraform/ui-events-terraform/"
              artifact: "ui-events-terraform-files"
              publishLocation: "pipeline"
  
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/coordinator/coordinator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Coordinator package to publish"
            condition: or(eq(variables.runCoordinatorDEV, 'true'),eq(variables.runCoordinatorQA, 'true'),eq(variables.runCoordinatorPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/coordinator"
              artifact: "polaris-coordinator-drop"
            displayName: "Publish Coordinator codebase artifact"
            condition: or(eq(variables.runCoordinatorDEV, 'true'),eq(variables.runCoordinatorQA, 'true'),eq(variables.runCoordinatorPROD, 'true'))
            
          - task: DownloadSecureFile@1
            name: licence
            inputs:
              secureFile: 'Aspose.Total.NET.lic'
            displayName: 'Download Aspose Licence'
            
          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Agent.TempDirectory)
              contents: Aspose.Total.NET.lic
              targetFolder: 'polaris-pipeline/pdf-generator'
              OverWrite: true
            displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'
            condition: or(eq(variables.runPdfGeneratorDEV, 'true'),eq(variables.runPdfGeneratorQA, 'true'),eq(variables.runPdfGeneratorPROD, 'true'))
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/pdf-generator/pdf-generator.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create PDF-Generator package to publish"
            condition: or(eq(variables.runPdfGeneratorDEV, 'true'),eq(variables.runPdfGeneratorQA, 'true'),eq(variables.runPdfGeneratorPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/pdf-generator"
              artifact: "polaris-pdf-generator-drop"
            displayName: "Publish PDF-Generator codebase artifact"
            condition: or(eq(variables.runPdfGeneratorDEV, 'true'),eq(variables.runPdfGeneratorQA, 'true'),eq(variables.runPdfGeneratorPROD, 'true'))
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-pipeline/text-extractor/text-extractor.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Text-Extractor package to publish"
            condition: or(eq(variables.runTextExtractorDEV, 'true'),eq(variables.runTextExtractorQA, 'true'),eq(variables.runTextExtractorPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/text-extractor"
              artifact: "polaris-text-extractor-drop"
            displayName: "Publish Text-Extractor codebase artifact"
            condition: or(eq(variables.runTextExtractorDEV, 'true'),eq(variables.runTextExtractorQA, 'true'),eq(variables.runTextExtractorPROD, 'true'))

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-auth-handover/polaris-auth-handover.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Auth Handover package to publish"
            condition: or(eq(variables.runAuthHandoverDEV, 'true'),eq(variables.runAuthHandoverQA, 'true'),eq(variables.runAuthHandoverPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-auth-handover"
              artifact: "polaris-auth-handover-drop"
            displayName: "Publish Auth Handover codebase artifact"
            condition: or(eq(variables.runAuthHandoverDEV, 'true'),eq(variables.runAuthHandoverQA, 'true'),eq(variables.runAuthHandoverPROD, 'true'))
            
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: false
              projects: "polaris-gateway/polaris-gateway/polaris-gateway.csproj"
              arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber) /p:SourceRevisionId=$(Build.SourceVersion)"
              zipAfterPublish: false
            displayName: "Create Gateway package to publish"
            condition: or(eq(variables.runGatewayDEV, 'true'),eq(variables.runGatewayQA, 'true'),eq(variables.runGatewayPROD, 'true'))

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/polaris-gateway"
              artifact: "polaris-gateway-drop"
            displayName: "Publish Gateway codebase artifact"
            condition: or(eq(variables.runGatewayDEV, 'true'),eq(variables.runGatewayQA, 'true'),eq(variables.runGatewayPROD, 'true'))
            
          # We want to rely only on the .env.production file, anything in .env is still included
          #  if not overwritten by .env.production.  For safety, just delete .env
          - task: DeleteFiles@1
            displayName: "Remove .env file"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))
            inputs:
              contents: |
                polaris-ui/.env
                
          # Add build version
          - task: PowerShell@2
            displayName: "Record build version"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))
            inputs:
              targetType: 'inline'
              workingDirectory: polaris-ui/public
              script: |
                New-Item build-version.txt -force
                $currentDate = Get-Date
                Set-Content build-version.txt "{`"name`":`"ui`",`"buildVersion`":`"$(Build.BuildNumber)`",`"sourceVersion`":`"$(Build.SourceVersion)`",`"lastBuilt`":`"$currentDate`"}"

          - task: Npm@1
            inputs:
              command: "install"
              workingDir: "polaris-ui"
            displayName: "npm install"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run prettier"
            displayName: "npm prettier"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: Npm@1
            inputs:
              command: "custom"
              workingDir: "polaris-ui"
              customCommand: "run build"
            displayName: "npm build"
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "polaris-ui/build"
              ArtifactName: "polaris-ui-drop"
              publishLocation: "Container"
            displayName: Publish UI artifact
            condition: or(eq(variables.runUICodebaseDEV, 'true'),eq(variables.runUICodebaseQA, 'true'),eq(variables.runUICodebasePROD, 'true'))