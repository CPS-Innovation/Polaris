parameters:
  name: ''
  env: ''
  envSuffix: ''
  buildAgent: ''
  terraformVersion: ''
  terraformStorageAccount: ''
  pipelineTerraformContainerName: ''
  pipelineEventsTerraformContainerName: ''
  uiTerraformContainerName: ''
  uiEventsTerraformContainerName: ''
  terraformStateKey: ''
  terraformAccessKey: ''
  spnClientId: ''
  spnClientSecret: ''
  spnTenantId: ''
  subscriptionId: ''
  azureSubscription: ''
  dependentStageName: ''

stages:
  - stage: Apply_${{ parameters.name }}
    displayName: CD > ${{ parameters.name }} Plan and Apply
    dependsOn: ${{ parameters.dependentStageName }}
    condition: and(succeeded(), or(eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_TERRAFORM'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_TERRAFORM'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_EVENTS_TERRAFORM'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true'),eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_CODEBASE'], 'true')))
    pool:
      name: ${{ parameters.buildAgent }}
    jobs:
      - deployment: Deploy_Terraform
        environment: ${{ parameters.name }}
        strategy:
          runOnce:
            deploy:
              steps:
                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: ${{ parameters.terraformVersion }}
                      
                #download pipeline terraform build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_TERRAFORM'], 'true')
                  displayName: Terraform > Download Pipeline terraform build
                  artifact: "pipeline-terraform-files"

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
                    TF_STATE_CONTAINER_NAME: ${{ parameters.pipelineTerraformContainerName }}
                    TF_STATE_KEY: ${{ parameters.terraformStateKey }}
                    TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}
                      
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=${{ parameters.env }}.tfplan -var-file="${{ parameters.env }}.tfvars"
                  displayName: 'Terraform > Write Pipeline Plan'
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve ${{ parameters.env }}.tfplan
                  displayName: Terraform > Apply to ${{ parameters.name }}
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                      
                #download pipeline events terraform build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM'], 'true')
                  displayName: Terraform > Download Pipeline Events terraform build
                  artifact: "pipeline-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
                    TF_STATE_CONTAINER_NAME: ${{ parameters.pipelineEventsTerraformContainerName }}
                    TF_STATE_KEY: ${{ parameters.terraformStateKey }}
                    TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=${{ parameters.env }}.tfplan -var-file="${{ parameters.env }}.tfvars"
                  displayName: 'Terraform > Write Pipeline Events Plan'
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve ${{ parameters.env }}.tfplan
                  displayName: Terraform > Apply to ${{ parameters.name }}
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                      
                #download ui terraform build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_TERRAFORM'], 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
                    TF_STATE_CONTAINER_NAME: ${{ parameters.uiTerraformContainerName }}
                    TF_STATE_KEY: ${{ parameters.terraformStateKey }}
                    TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=${{ parameters.env }}.tfplan -var-file="${{ parameters.env }}.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve ${{ parameters.env }}.tfplan
                  displayName: Terraform > Apply to ${{ parameters.name }}
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                      
                #download ui events terraform build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_EVENTS_TERRAFORM'], 'true')
                  displayName: Terraform > Download UI terraform build
                  artifact: "ui-events-terraform-files"
                
                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
                    TF_STATE_CONTAINER_NAME: ${{ parameters.uiEventsTerraformContainerName }}
                    TF_STATE_KEY: ${{ parameters.terraformStateKey }}
                    TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}
                
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=${{ parameters.env }}.tfplan -var-file="${{ parameters.env }}.tfvars"
                  displayName: 'Terraform > Write UI Plan'
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                
                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve ${{ parameters.env }}.tfplan
                  displayName: Terraform > Apply to ${{ parameters.name }}
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_UI_EVENTS_TERRAFORM'], 'true')
                  workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                      
                #download coordinator build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                  displayName: Deploy > Download Coordinator Codebase Build
                  artifact: "polaris-coordinator-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                  displayName: 'Deploy Coordinator Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: functionAppLinux
                    appName: "fa-polaris-pipeline${{parameters.envSuffix}}-coordinator"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop/a/coordinator
                
                #download pdf-generator build artifact
                  - download: PolarisBuild
                    condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                    displayName: Deploy > Download PDF Generator Codebase Build
                    artifact: "polaris-pdf-generator-drop"
                
                # Deploy Related Codebase to Env
                  - task: AzureFunctionApp@1
                    condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                    displayName: 'Deploy PDF Generator Azure Function App to ${{ parameters.name }}'
                    inputs:
                      azureSubscription: ${{ parameters.azureSubscription }}
                      appType: functionAppLinux
                      appName: "fa-polaris-pipeline${{parameters.envSuffix}}-pdf-generator"
                      package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop/a/pdf-generator
                
                #download text-extractor build artifact
                  - download: PolarisBuild
                    condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                    displayName: Deploy > Download Text Extractor Codebase Build
                    artifact: "polaris-text-extractor-drop"
                
                # Deploy Related Codebase to Env
                  - task: AzureFunctionApp@1
                    condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_PIPELINE_CODEBASE'], 'true')
                    displayName: 'Deploy Text Extractor Azure Function App to ${{ parameters.name }}'
                    inputs:
                      azureSubscription: ${{ parameters.azureSubscription }}
                      appType: functionAppLinux
                      appName: "fa-polaris-pipeline${{parameters.envSuffix}}-text-extractor"
                      package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop/a/text-extractor
                      
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true')
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: "polaris-gateway-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true')
                  displayName: 'Deploy Gateway Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: functionAppLinux
                    appName: "fa-polaris${{parameters.envSuffix}}-gateway"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop/a/polaris-gateway
                      
                #download gateway build artifact
                - download: PolarisBuild
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true')
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: "polaris-auth-handover-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  condition: eq(dependencies.Determine_Changes.outputs['Generate_Diff.Change_Results.RUN_GATEWAY_CODEBASE'], 'true')
                  displayName: 'Deploy Auth Handover Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: functionAppLinux
                    appName: "fa-polaris${{parameters.envSuffix}}-auth-handover"
                    package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-drop/a/polaris-auth-handover
                      
                #download terraform build artifact
                - download: PolarisBuild
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: "polaris-ui-drop"
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy UI App Service to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: webAppLinux
                    appName: "as-web-polaris${{parameters.envSuffix"
                    packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop/a/polaris-ui
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    Action: 'Restart Azure App Service'
                    WebAppName: "as-web-polaris${{parameters.envSuffix}}"