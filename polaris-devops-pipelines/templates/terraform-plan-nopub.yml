parameters:
  name: ''
  buildAgent: ''
  terraformVersion: ''
  terraformStorageAccount: ''
  terraformContainerName: ''
  terraformStateKey: ''
  terraformAccessKey: ''
  workingDirectory: ''
  planName: ''
  spnClientId: ''
  spnClientSecret: ''
  spnTenantId: ''
  subscriptionId: ''

stages:
  - template: templates/terraform-adv-validation.yml # Validate
    parameters:
      terraformVersion: $(terraform-version)
      terraformStorageAccount: $(dev-terraform-storage-account)
      terraformContainerName: $(ddei-terraform-container-name)
      terraformStateKey: $(terraform-key)
      terraformAccessKey: $(cpsdevstorageterraform-key1)
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      rulesToSkip: 'CKV2_AZURE_1,CKV2_AZURE_18'

  - template: templates/terraform-plan-nopub.yml # Plan DEV
    parameters:
      name: 'DEV'
      buildAgent: $(dev-build-agent)
      terraformVersion: $(terraform-version)
      terraformStorageAccount: $(dev-terraform-storage-account)
      terraformContainerName: $(ddei-terraform-container-name)
      terraformStateKey: $(terraform-key)
      terraformAccessKey: $(cpsdevstorageterraform-key1)
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      planName: 'dev'
      spnClientId: $(innovation-development-spn-client-id)
      spnClientSecret: $(innovation-development-spn-secret)
      spnTenantId: $(innovation-development-spn-tenant-id)
      subscriptionId: $(innovation-development-subscription-id)
  
  - stage: Plan_${{ parameters.name }}
    displayName: PR > Check ${{ parameters.name }} Plan
    dependsOn: Validate
    condition: succeeded()
    jobs:
      - job:
        pool:
          name: ${{ parameters.buildAgent }}
        steps:
          # Install Terraform based on version variable
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: Terraform > Install
            inputs:
              terraformVersion: ${{ parameters.terraformVersion }}

          # Terraform Init
          - bash: |
              terraform init \
                -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                -backend-config="key=$TF_STATE_KEY" \
                -backend-config="access_key=$TF_STATE_ACCESS_KEY"
            displayName: Terraform > Init
            workingDirectory: ${{ parameters.workingDirectory }}
            env:
              TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
              TF_STATE_CONTAINER_NAME: ${{ parameters.terraformContainerName }}
              TF_STATE_KEY: ${{ parameters.terraformStateKey }}
              TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}

          # Terraform Plan
          - bash: |
              terraform plan -input=false -out=${{ parameters.planName }}.tfplan -var-file="${{ parameters.planName }}.tfvars"
            displayName: 'Terraform > Write ${{ parameters.name }} Plan'
            workingDirectory: ${{ parameters.workingDirectory }}
            env:
              ARM_CLIENT_ID: ${{ parameters.spnClientId }}
              ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
              ARM_TENANT_ID: ${{ parameters.spnTenantId }}
              ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}