parameters:
  envName: ''
  runPipelineTerraform: ''
  runPipelineEventsTerraform: ''
  runUITerraform: ''
  runUIEventsTerraform: ''
  runPipelineCodebase: ''
  runGatewayCodebase: ''
  runUICodebase: ''
  terraformVersion: ''
  terraformStorageAccount: ''
  terraformKey: ''
  terraformAccessKey: ''
  pipelineTerraformContainerName: ''
  pipelineEventsTerraformContainerName: ''
  uiTerraformContainerName: ''
  uiEventsTerraformContainerName: ''
  spnClientId: ''
  spnSecret: ''
  spnTenantId: ''
  subscriptionId: ''
  subscriptionName: ''
  planName: ''
  appNameSuffix: ''

steps:
  # Install Terraform based on version variable
  - task: ms${{parameters.appNameSuffix)labs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Terraform > Install
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineEventsTerraform, 'true'),eq(parameters.runUITerraform, 'true'),eq(parameters.runUIEventsTerraform, 'true'))
    inputs:
      terraformVersion: ${{parameters.terraformVersion}}
  
  #download pipeline terraform build artifact
  - download: PolarisBuild
    condition: eq(parameters.runPipelineTerraform, 'true')
    displayName: Terraform > Download Pipeline terraform build
    artifact: "pipeline-terraform-files"
  
  # Terraform Init
  - bash: |
      terraform init \
        -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
        -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
        -backend-config="key=$TF_STATE_KEY" \
        -backend-config="access_key=$TF_STATE_ACCESS_KEY"
    displayName: Terraform > Init
    condition: eq(parameters.runPipelineTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
    env:
      TF_STATE_ACCOUNT_NAME: ${{parameters.terraformStorageAccount)
      TF_STATE_CONTAINER_NAME: ${{parameters.pipelineTerraformContainerName)
      TF_STATE_KEY: ${{parameters.terraformKey)
      TF_STATE_ACCESS_KEY: ${{parameters.terraformAccessKey)
  
  # Terraform Plan
  - bash: |
      terraform plan -input=false -out=${{parameters.planName).tfplan -var-file="${{parameters.planName).tfvars"
    displayName: 'Terraform > Write Pipeline Plan'
    condition: eq(parameters.runPipelineTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  # Terraform Apply
  - bash: |
      terraform apply -auto-approve ${{parameters.planName).tfplan
    displayName: Terraform > Apply to ${{parameters.envName)
    condition: eq(parameters.runPipelineTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  #download pipeline events terraform build artifact
  - download: PolarisBuild
    condition: eq(parameters.runPipelineEventsTerraform, 'true')
    displayName: Terraform > Download Pipeline Events terraform build
    artifact: "pipeline-events-terraform-files"
  
  # Terraform Init
  - bash: |
      terraform init \
        -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
        -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
        -backend-config="key=$TF_STATE_KEY" \
        -backend-config="access_key=$TF_STATE_ACCESS_KEY"
    displayName: Terraform > Init
    condition: eq(parameters.runPipelineEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
    env:
      TF_STATE_ACCOUNT_NAME: ${{parameters.terraformStorageAccount)
      TF_STATE_CONTAINER_NAME: ${{parameters.pipelineEventsTerraformContainerName)
      TF_STATE_KEY: ${{parameters.terraformKey)
      TF_STATE_ACCESS_KEY: ${{parameters.terraformAccessKey)
  
  # Terraform Plan
  - bash: |
      terraform plan -input=false -out=${{parameters.planName).tfplan -var-file="${{parameters.planName).tfvars"
    displayName: 'Terraform > Write Pipeline Events Plan'
    condition: eq(parameters.runPipelineEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  # Terraform Apply
  - bash: |
      terraform apply -auto-approve ${{parameters.planName).tfplan
    displayName: Terraform > Apply to ${{parameters.envName)
    condition: eq(parameters.runPipelineEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/pipeline-events-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  #download ui terraform build artifact
  - download: PolarisBuild
    condition: eq(parameters.runUITerraform, 'true')
    displayName: Terraform > Download UI terraform build
    artifact: "ui-terraform-files"
  
  # Terraform Init
  - bash: |
      terraform init \
        -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
        -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
        -backend-config="key=$TF_STATE_KEY" \
        -backend-config="access_key=$TF_STATE_ACCESS_KEY"
    displayName: Terraform > Init
    condition: eq(parameters.runUITerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
    env:
      TF_STATE_ACCOUNT_NAME: ${{parameters.terraformStorageAccount)
      TF_STATE_CONTAINER_NAME: ${{parameters.uiTerraformContainerName)
      TF_STATE_KEY: ${{parameters.terraformKey)
      TF_STATE_ACCESS_KEY: ${{parameters.terraformAccessKey)
  
  # Terraform Plan
  - bash: |
      terraform plan -input=false -out=${{parameters.planName).tfplan -var-file="${{parameters.planName).tfvars"
    displayName: 'Terraform > Write UI Plan'
    condition: eq(parameters.runUITerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  # Terraform Apply
  - bash: |
      terraform apply -auto-approve ${{parameters.planName).tfplan
    displayName: Terraform > Apply to ${{parameters.envName)
    condition: eq(parameters.runUITerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  #download ui events terraform build artifact
  - download: PolarisBuild
    condition: eq(parameters.runUIEventsTerraform, 'true')
    displayName: Terraform > Download UI terraform build
    artifact: "ui-events-terraform-files"
  
  # Terraform Init
  - bash: |
      terraform init \
        -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
        -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
        -backend-config="key=$TF_STATE_KEY" \
        -backend-config="access_key=$TF_STATE_ACCESS_KEY"
    displayName: Terraform > Init
    condition: eq(parameters.runUIEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
    env:
      TF_STATE_ACCOUNT_NAME: ${{parameters.terraformStorageAccount)
      TF_STATE_CONTAINER_NAME: ${{parameters.uiEventsTerraformContainerName)
      TF_STATE_KEY: ${{parameters.terraformKey)
      TF_STATE_ACCESS_KEY: ${{parameters.terraformAccessKey)
  
  # Terraform Plan
  - bash: |
      terraform plan -input=false -out=${{parameters.planName).tfplan -var-file="${{parameters.planName).tfvars"
    displayName: 'Terraform > Write UI Plan'
    condition: eq(parameters.runUIEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  # Terraform Apply
  - bash: |
      terraform apply -auto-approve ${{parameters.planName).tfplan
    displayName: Terraform > Apply to ${{parameters.envName)
    condition: eq(parameters.runUIEventsTerraform, 'true')
    workingDirectory: $(Pipeline.Workspace)/PolarisBuild/ui-events-terraform-files
    env:
      ARM_CLIENT_ID: ${{parameters.spnClientId)
      ARM_CLIENT_SECRET: ${{parameters.spnSecret)
      ARM_TENANT_ID: ${{parameters.spnTenantId)
      ARM_SUBSCRIPTION_ID: ${{parameters.subscriptionId)
  
  #download coordinator build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: Deploy > Download Coordinator Codebase Build
    artifact: "polaris-coordinator-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: 'Deploy Coordinator Azure Function App to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: functionAppLinux
      appName: "fa-polaris-pipeline${{parameters.appNameSuffix)-coordinator"
      package: $(Pipeline.Workspace)/PolarisBuild/polaris-coordinator-drop/a/coordinator
  
  #download pdf-generator build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: Deploy > Download PDF Generator Codebase Build
    artifact: "polaris-pdf-generator-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: 'Deploy PDF Generator Azure Function App to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: functionApp
      appName: "fa-polaris-pipeline${{parameters.appNameSuffix)-pdf-generator"
      package: $(Pipeline.Workspace)/PolarisBuild/polaris-pdf-generator-drop/a/pdf-generator
  
  #download text-extractor build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: Deploy > Download Text Extractor Codebase Build
    artifact: "polaris-text-extractor-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    condition: or(eq(parameters.runPipelineTerraform, 'true'),eq(parameters.runPipelineCodebase, 'true'))
    displayName: 'Deploy Text Extractor Azure Function App to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: functionAppLinux
      appName: "fa-polaris-pipeline${{parameters.appNameSuffix)-text-extractor"
      package: $(Pipeline.Workspace)/PolarisBuild/polaris-text-extractor-drop/a/text-extractor
  
  #download gateway build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runGatewayCodebase, 'true'))
    displayName: Deploy > Download Gateway Codebase Build
    artifact: "polaris-gateway-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runGatewayCodebase, 'true'))
    displayName: 'Deploy Gateway Azure Function App to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: functionAppLinux
      appName: "fa-polaris${{parameters.appNameSuffix)-gateway"
      package: $(Pipeline.Workspace)/PolarisBuild/polaris-gateway-drop/a/polaris-gateway
  
  #download gateway build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runGatewayCodebase, 'true'))
    displayName: Deploy > Download Auth Handover Codebase Build
    artifact: "polaris-auth-handover-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureFunctionApp@1
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runGatewayCodebase, 'true'))
    displayName: 'Deploy Auth Handover Azure Function App to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: functionAppLinux
      appName: "fa-polaris${{parameters.appNameSuffix)-auth-handover"
      package: $(Pipeline.Workspace)/PolarisBuild/polaris-auth-handover-drop/a/polaris-auth-handover
  
  #download UI build artifact
  - download: PolarisBuild
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runUICodebase, 'true'))
    displayName: Deploy > Download SPA Codebase Build
    artifact: "polaris-ui-drop"
  
  # Deploy Related Codebase to Env
  - task: AzureRmWebAppDeployment@4
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runUICodebase, 'true'))
    displayName: 'Deploy UI App Service to ${{parameters.envName)'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      appType: webAppLinux
      WebAppName: "as-web-polaris${{parameters.appNameSuffix)"
      packageForLinux: $(Pipeline.Workspace)/PolarisBuild/polaris-ui-drop/a/polaris-ui
  
  # Restart app service    
  - task: AzureAppServiceManage@0
    condition: or(eq(parameters.runUITerraform, 'true'),eq(parameters.runUICodebase, 'true'))
    displayName: 'Restart Azure App Service'
    inputs:
      azureSubscription: ${{parameters.subscriptionName)
      Action: 'Restart Azure App Service'
      WebAppName: "as-web-polaris${{parameters.appNameSuffix)"