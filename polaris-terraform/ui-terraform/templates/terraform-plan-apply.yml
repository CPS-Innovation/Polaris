parameters:
  name: ''
  buildAgent: ''
  terraformArtifactName: ''
  terraformVersion: ''
  terraformStorageAccount: ''
  terraformContainerName: ''
  terraformStateKey: ''
  terraformAccessKey: ''
  planName: ''
  spnClientId: ''
  spnClientSecret: ''
  spnTenantId: ''
  subscriptionId: ''
  gatewayFunctionAppName: ''
  authHandoverFunctionAppName: ''
  uiAppServiceName: ''
  azureSubscription: ''
  gatewayCodebaseArtifactName: ''
  authHandoverCodebaseArtifactName: ''
  uiCodebaseArtifactName: ''
  dependentStageName: ''
  triggeringAlias: ''
    
stages:
  - stage: Apply_${{ parameters.name }}
    displayName: CD > ${{ parameters.name }} Plan and Apply
    dependsOn: ${{ parameters.dependentStageName }}
    condition: and(succeeded(), eq(${{ parameters.triggeringAlias }}, 'PolarisUITerraform'))
    pool:
      name: ${{ parameters.buildAgent }}
    jobs:
      - deployment: Deploy_Terraform
        environment: ${{ parameters.planName }}
        strategy:
          runOnce:
            deploy:
              steps:
                #download terraform build artifact
                - download: polaris-ui-terraform
                  displayName: Terraform > Download ${{ parameters.planName }} Terraform Build
                  artifact: ${{ parameters.terraformArtifactName }}

                # Install Terraform based on version variable
                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: Terraform > Install
                  inputs:
                    terraformVersion: ${{ parameters.terraformVersion }}

                # Terraform Init
                - bash: |
                    terraform init \
                      -backend-config="storage_account_name=$TF_STATE_ACCOUNT_NAME" \
                      -backend-config="container_name=$TF_STATE_CONTAINER_NAME" \
                      -backend-config="key=$TF_STATE_KEY" \
                      -backend-config="access_key=$TF_STATE_ACCESS_KEY"
                  displayName: Terraform > Init
                  workingDirectory: $(Pipeline.Workspace)/polaris-ui-terraform/${{ parameters.terraformArtifactName }}
                  env:
                    TF_STATE_ACCOUNT_NAME: ${{ parameters.terraformStorageAccount }}
                    TF_STATE_CONTAINER_NAME: ${{ parameters.terraformContainerName }}
                    TF_STATE_KEY: ${{ parameters.terraformStateKey }}
                    TF_STATE_ACCESS_KEY: ${{ parameters.terraformAccessKey }}
                      
                # Terraform Plan
                - bash: |
                    terraform plan -input=false -out=${{ parameters.planName }}.tfplan -var-file="${{ parameters.planName }}.tfvars"
                  displayName: 'Terraform > Write ${{ parameters.name }} Plan'
                  workingDirectory: $(Pipeline.Workspace)/polaris-ui-terraform/${{ parameters.terraformArtifactName }}
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}

                # Terraform Apply
                - bash: |
                    terraform apply -auto-approve ${{ parameters.planName }}.tfplan
                  displayName: Terraform > Apply to ${{ parameters.name }}
                  workingDirectory: $(Pipeline.Workspace)/polaris-ui-terraform/${{ parameters.terraformArtifactName }}
                  env:
                    ARM_CLIENT_ID: ${{ parameters.spnClientId }}
                    ARM_CLIENT_SECRET: ${{ parameters.spnClientSecret }}
                    ARM_TENANT_ID: ${{ parameters.spnTenantId }}
                    ARM_SUBSCRIPTION_ID: ${{ parameters.subscriptionId }}
                    
  - stage: Deploy_Gateway_to_${{ parameters.name }}
    displayName: CD > Deploy Gateway to ${{ parameters.name }}
    dependsOn: Apply_${{ parameters.name }}
    condition: or(succeeded(), eq(${{ parameters.triggeringAlias }}, 'PolarisGatewayCodebase'))
    pool:
      name: ${{ parameters.buildAgent }}
    jobs:
      - deployment: Gateway_CodeBase
        environment: ${{ parameters.planName }}
        strategy:
          runOnce:
            deploy:
              steps:
                #download terraform build artifact
                - download: PolarisGatewayCodeBase
                  displayName: Deploy > Download Gateway Codebase Build
                  artifact: ${{ parameters.gatewayCodebaseArtifactName }}

                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Gateway Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: functionAppLinux
                    appName: ${{ parameters.gatewayFunctionAppName }}
                    package: $(Pipeline.Workspace)/PolarisGatewayCodeBase/${{ parameters.gatewayCodebaseArtifactName }}/a/polaris-gateway

  - stage: Deploy_Auth_Handover_to_${{ parameters.name }}
    displayName: CD > Deploy Auth Handover to ${{ parameters.name }}
    dependsOn: Deploy_Gateway_to_${{ parameters.name }}
    condition: or(succeeded(), eq(${{ parameters.triggeringAlias }}, 'PolarisAuthHandoverCodebase'))
    pool:
      name: ${{ parameters.buildAgent }}
    jobs:
      - deployment: Auth_Handover_CodeBase
        environment: ${{ parameters.planName }}
        strategy:
          runOnce:
            deploy:
              steps:
                #download terraform build artifact
                - download: PolarisAuthHandoverCodebase
                  displayName: Deploy > Download Auth Handover Codebase Build
                  artifact: ${{ parameters.authHandoverCodebaseArtifactName }}
                
                # Deploy Related Codebase to Env
                - task: AzureFunctionApp@1
                  displayName: 'Deploy Auth Handover Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: functionAppLinux
                    appName: ${{ parameters.authHandoverFunctionAppName }}
                    package: $(Pipeline.Workspace)/PolarisAuthHandoverCodebase/${{ parameters.authHandoverCodebaseArtifactName }}/a/polaris-auth-handover
                    
  - stage: Deploy_SPA_to_${{ parameters.name }}
    displayName: CD > Deploy SPA to ${{ parameters.name }}
    dependsOn: Deploy_Auth_Handover_to_${{ parameters.name }}
    condition: or(succeeded(), eq(${{ parameters.triggeringAlias }}, 'PolarisUICodebase'))
    pool:
      name: ${{ parameters.buildAgent }}
    jobs:
      - deployment: SPA_CodeBase
        environment: ${{ parameters.planName }}
        strategy:
          runOnce:
            deploy:
              steps:
                #download terraform build artifact
                - download: PolarisUICodebase
                  displayName: Deploy > Download SPA Codebase Build
                  artifact: ${{ parameters.uiCodebaseArtifactName }}
                
                # Deploy Related Codebase to Env
                - task: AzureRmWebAppDeployment@4
                  displayName: 'Deploy Auth Handover Azure Function App to ${{ parameters.name }}'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    appType: webAppLinux
                    appName: ${{ parameters.uiAppServiceName }}
                    packageForLinux: $(Pipeline.Workspace)/PolarisUICodebase/${{ parameters.uiCodebaseArtifactName }}/a/polaris-ui
                
                # Restart app service    
                - task: AzureAppServiceManage@0
                  displayName: 'Restart Azure App Service'
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    Action: 'Restart Azure App Service'
                    WebAppName: ${{ parameters.uiAppServiceName }}