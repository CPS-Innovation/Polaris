trigger: none

pool:
  name: $(build-agent)

schedules:
  # Switch off pre-midnight runs for now, devs still working/releasing
  #  and the e2e tests runs use up agents and otherwise confound releases

  # # run every 15 minutes between 7pm and 11:45pm
  # - cron: "*/15 19-23 * * *"
  #   displayName: Cron schedule after work and before midnight
  #   branches:
  #     include:
  #       - main
  #   always: true
  # run every 15 minutes between midnight and 2:45pm

  - cron: "*/15 00-02 * * *"
    displayName: Cron schedule after midnight before 3am cleardown operations
    branches:
      include:
        - main
    always: true
  # run every 15 minutes between 4am and 6:45pm
  - cron: "*/15 04-06 * * *"
    displayName: Cron schedule after 3am cleardown operations
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: PolarisTagged
      type: github
      endpoint: CPS-Innovation
      name: CPS-Innovation/Polaris
      #ref: refs/tags/$(cypress_environment)
      ref: feature/26478-add-integration-tests-and-results
      
variables:
  PdfRedactorUrl: $(PdfRedactorLocation)
      
steps:
  #- checkout: PolarisTagged
  #  clean: true
  #  persistCredentials: true
  #  fetchDepth: 1
    #displayName: "Checkout polaris-e2e at $(cypress_environment) tag"
  #  displayName: "Checkout polaris-e2e at dev tag"

  - task: DownloadSecureFile@1
    name: licence
    inputs:
      secureFile: "Aspose.Total.NET.lic"
    displayName: "Download Aspose Licence"

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Agent.TempDirectory)
      contents: Aspose.Total.NET.lic
      targetFolder: "polaris-pipeline/pdf-redactor.integration.tests"
    displayName: "Copy Aspose.Total.NET.lic to project folder before any builds occur"
    
  - task: DotNetCoreCLI@2
    inputs:
      command: "build"
      projects: "polaris-pipeline/pdf-redactor.integration.tests/pdf-redactor.integration.tests.csproj"
      arguments: "--configuration Release"
    displayName: "Build PDF Redactor Integration Tests"
    
  - task: FileTransform@2
    displayName: 'Transform Integration Test Settings'
    inputs:
      folderPath: "polaris-pipeline/pdf-redactor.integration.tests/bin/Release/net8.0"
      jsonTargetFiles: "appSettings.json"
      xmlTransformationRules: '' # disabled, prevents non-windows-platform error
    
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      workingDirectory: "$(System.DefaultWorkingDirectory)/polaris-pipeline/pdf-redactor.integration.tests/bin/Release/net8.0"
      script: |
        dotnet ./pdf-redactor.integration.tests.dll
      failOnStderr: true
    displayName: "Run PDF Redactor Integration Tests"
    
  #- task: Bash@3
  #  inputs:
  #    targetType: "inline"
  #    script: "env | sort"

  #- task: Npm@1
  #  inputs:
  #    command: "install"
  #    workingDir: "polaris-e2e"
  #  displayName: "npm install"

  #- task: CmdLine@2
  #  env:
  #    CYPRESS_CLIENTSECRET: "$(cypress_clientsecret)"
  #    CYPRESS_AD_USERNAME: "$(cypress_ad_username)"
  #    CYPRESS_AD_PASSWORD: "$(cypress_ad_password)"
  #    CYPRESS_ENVIRONMENT: "$(cypress_environment)"
  #    CYPRESS_PRE_SEARCH_DELAY_MS: "$(cypress_pre_search_delay_ms)"
  #  condition: succeeded()
  #  inputs:
  #    workingDirectory: "polaris-e2e"
  #    script: "npm run cy:ci"
  #  displayName: "cypress run tests"

  #- task: PublishBuildArtifacts@1
  #  condition: always() # this step will always run, helpful to diagnose failing cypress tests
  #  inputs:
  #    PathtoPublish: "polaris-e2e/cypress/videos"
  #    ArtifactName: "Cypress failure vidoes"
  #    publishLocation: "Container"

  #- task: PublishBuildArtifacts@1
  #  condition: always() # this step will always run, helpful to diagnose failing cypress tests
  #  inputs:
  #    PathtoPublish: "polaris-e2e/cypress/screenshots"
  #    ArtifactName: "Cypress failure screenshots"
  #    publishLocation: "Container"
