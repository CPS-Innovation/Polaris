trigger:
  branches:
    include:
    - main
    
  paths:
    include:
    - "polaris-pipeline/coordinator/*"
    - "polaris-pipeline/coordinator.tests/*"
    - "polaris-pipeline/common/*"

pool:
  vmImage: "ubuntu-latest"

variables:
  rootFolder: "polaris-pipeline"
  functionName: "coordinator"
  buildConfiguration: "Release"

steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: "build"
      projects: "$(rootFolder)/$(functionName)/$(functionName).csproj"
      arguments: "--configuration $(buildConfiguration)"
    displayName: "Build"
    
  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'

  - task: DotNetCoreCLI@2
    inputs:
      command: "test"
      projects: "$(rootFolder)/$(functionName)*tests/$(functionName)*tests.csproj"
      arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/$(functionName)TestResults/Coverage/"
    displayName: "Run Coordinator and Common Library tests"
    
  - task: DotNetCoreCLI@2
    inputs:
      command: "test"
      projects: "$(rootFolder)/Common.tests/Common.tests.csproj"
      arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/CommonTestResults/Coverage/"
    displayName: "Run Coordinator and Common Library tests"

  - script: |
      reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      publishWebProjects: false
      projects: "$(rootFolder)/$(functionName)/$(functionName).csproj"
      arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
      zipAfterPublish: False
    displayName: "Publish"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: "$(functionName)-drop"
      publishLocation: "Container"
