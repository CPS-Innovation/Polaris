trigger:
  branches:
    include:
      - main
  
  paths:
    include:
      - "polaris-pipeline/pdf-generator/*"
      - "polaris-pipeline/pdf-generator.tests/*"
      - "polaris-pipeline/common/*"
      - "polaris-pipeline/common.tests/*"

pool:
  vmImage: "ubuntu-latest"

variables:
  rootFolder: "polaris-pipeline"
  functionName: "pdf-generator"
  buildConfiguration: "Release"

steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: "build"
      projects: "$(rootFolder)/$(functionName)/$(functionName).csproj"
      arguments: "--configuration $(buildConfiguration)"
    displayName: "Build"
    
  - task: DownloadSecureFile@1
    name: licence
    inputs:
      secureFile: 'Aspose.Total.NET.lic'
    displayName: 'Download Aspose Licence'

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Agent.TempDirectory)
      contents: Aspose.Total.NET.lic
      targetFolder: '$(rootFolder)/$(functionName)/$(functionName)'
    displayName: 'Copy Aspose.Total.NET.lic to project folder before any builds occur'

  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --global dotnet-reportgenerator-globaltool'

  - task: DotNetCoreCLI@2
    inputs:
      command: "test"
      projects: "$(rootFolder)/$(functionName)*tests/$(functionName)*tests.csproj"
      arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
    displayName: "Run PDF Generator tests"

  - task: DotNetCoreCLI@2
    inputs:
      command: "test"
      projects: "$(rootFolder)/Common.tests/Common.tests.csproj"
      arguments: "--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
    displayName: "Run Common Library tests"

  - script: |
      reportgenerator -reports:$(Build.SourcesDirectory)/**/*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
    displayName: 'Create code coverage report'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'

  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      publishWebProjects: false
      projects: "$(rootFolder)/$(functionName)/$(functionName).csproj"
      arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
      zipAfterPublish: False
    displayName: "Publish"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: "$(functionName)-drop"
      publishLocation: "Container"
    displayName: "Publish Artifacts to Staging"